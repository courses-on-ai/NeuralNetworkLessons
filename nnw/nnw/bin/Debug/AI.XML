<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AI</name>
    </assembly>
    <members>
        <member name="T:AI.Algebra.Gauss">
            <summary>
            Метод Гаусса (он эффективней Крамера)
            </summary>
        </member>
        <member name="M:AI.Algebra.Gauss.SolvingEquations(AI.Matrix,AI.Vector)">
            <summary>
            Выдает ответ(решение СЛАУ) (не работает)
            </summary>
            <param name="A">Матрица коэффициентов</param>
            <param name="B">Вектор ответов</param>
            <returns></returns>
        </member>
        <member name="T:AI.Algebra.Kramer">
            <summary>
            Description of Kramer.
            </summary>
        </member>
        <member name="M:AI.Algebra.Kramer.SolvingEquations(AI.Matrix,AI.Vector)">
            <summary>
            Вывод вектора решений системы уравнений
            </summary>
            <param name="A">Матрица коэфициентов системы</param>
            <param name="B">Вектор ответов</param>
            <returns>Вектор неизвестных</returns>
        </member>
        <member name="T:AI.AlgorithmAnalysis.CorrelationAnalysis">
            <summary>
            Корреляционный анализ (проверка ортогональности)
            </summary>
        </member>
        <member name="P:AI.AlgorithmAnalysis.CorrelationAnalysis.CorMatrNorm">
            <summary>
            Нормированная корреляционная матрица
            </summary>
        </member>
        <member name="M:AI.AlgorithmAnalysis.CorrelationAnalysis.#ctor(AI.Matrix)">
            <summary>
            Корреляционный анализ
            </summary>
            <param name="matrix">Матрица перехода</param>
        </member>
        <member name="M:AI.AlgorithmAnalysis.CorrelationAnalysis.MeanOrtog">
            <summary>
            Средний коэффициент ортогональности
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.AlgorithmAnalysis.CorrelationAnalysis.CorMatrDeterm">
            <summary>
            Определитель корреляционной  матрицы (один из показателей мультиколлинеарности)
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.AlgorithmAnalysis.Metrics">
            <summary>
            Метрики качества
            </summary>
        </member>
        <member name="M:AI.AlgorithmAnalysis.Metrics.Pressicion(AI.ML.Classifiers.IClassifier,AI.ML.Datasets.VectorIntDataset,System.Int32)">
            <summary>
            Точности по классам
            </summary>
            <param name="classifier">Классификатор</param>
            <param name="vectorClasses">Датасет</param>
            <param name="classes">число классов</param>
        </member>
        <member name="M:AI.AlgorithmAnalysis.Metrics.PressicionMean(AI.ML.Classifiers.IClassifier,AI.ML.Datasets.VectorIntDataset,System.Int32)">
            <summary>
            Средняя точность
            </summary>
            <param name="classifier">Классификатор</param>
            <param name="vectorClasses">Датасет</param>
            <param name="classes">число классов</param>
        </member>
        <member name="M:AI.AlgorithmAnalysis.Metrics.PressicionMatrix(AI.ML.Classifiers.IClassifier,AI.ML.Datasets.VectorIntDataset,System.Int32)">
            <summary>
            Матрица точностей(перепутывания)
            </summary>
            <param name="classifier">Классификатор</param>
            <param name="vectorClasses">Датасет</param>
            <param name="classes">число классов</param>
        </member>
        <member name="T:AI.AlgorithmAnalysis.SimilarityOfBases">
            <summary>
            Проверка схожести двух базисов
            </summary>
        </member>
        <member name="M:AI.AlgorithmAnalysis.SimilarityOfBases.#ctor(AI.Matrix,AI.Matrix)">
            <summary>
            Проверка схожести двух базисов
            </summary>
            <param name="bas1">Базис №1</param>
            <param name="bas2">Базис №2</param>
        </member>
        <member name="M:AI.AlgorithmAnalysis.SimilarityOfBases.ProbRandBasis">
            <summary>
            Вероятность что базисы не связаны (случайны)
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.Approximation.PolyAppr">
            <summary>
            Полиномиальная аппроксимация
            </summary>
        </member>
        <member name="F:AI.Approximation.PolyAppr.newX">
            <summary>
            Новый вектор иксов, больше точек
            </summary>
        </member>
        <member name="M:AI.Approximation.PolyAppr.#ctor(AI.Vector,AI.Vector)">
            <summary>
            Полиномиальная аппроксимация
            </summary>
        </member>
        <member name="M:AI.Approximation.PolyAppr.Predict(System.Double)">
            <summary>
            Расчет одного значения
            </summary>
            <param name="inp">Независимая переменная</param>
            <returns>Прогноз</returns>
        </member>
        <member name="M:AI.Approximation.PolyAppr.Prediction(System.Double)">
            <summary>
            Перерасчет интервала значения
            </summary>
            <param name="step">Шаг</param>
            <returns>Прогноз</returns>
        </member>
        <member name="T:AI.Approximation.RBFAppr">
            <summary>
            Аппроксимация радиально-базисными ф-ями
            </summary>
        </member>
        <member name="F:AI.Approximation.RBFAppr.newX">
            <summary>
            Новый вектор иксов, больше точек
            </summary>
        </member>
        <member name="M:AI.Approximation.RBFAppr.#ctor(AI.Vector,AI.Vector)">
            <summary>
            Аппроксимация радиально-базисными ф-ями
            </summary>
        </member>
        <member name="M:AI.Approximation.RBFAppr.Predict(System.Double)">
            <summary>
            Расчет одного значения
            </summary>
            <param name="inp">Независимая переменная</param>
            <returns>Прогноз</returns>
        </member>
        <member name="M:AI.Approximation.RBFAppr.Prediction(System.Double)">
            <summary>
            Перерасчет интервала значения
            </summary>
            <param name="step">Шаг</param>
            <returns>Прогноз</returns>
        </member>
        <member name="T:AI.Charts.Controls.ChartControl">
            <summary>
            Description of ChartControl.
            </summary>
        </member>
        <member name="P:AI.Charts.Controls.ChartControl.ChartName">
            <summary>
            Имя графика
            </summary>
        </member>
        <member name="P:AI.Charts.Controls.ChartControl.LabelX">
            <summary>
            Имя оси X
            </summary>
        </member>
        <member name="P:AI.Charts.Controls.ChartControl.LabelY">
            <summary>
            Имя оси Y
            </summary>
        </member>
        <member name="P:AI.Charts.Controls.ChartControl.Is3D">
            <summary>
            Включены ли 3D эффекты
            </summary>
        </member>
        <member name="M:AI.Charts.Controls.ChartControl.#ctor">
            <summary>
            Графики
            </summary>
        </member>
        <member name="M:AI.Charts.Controls.ChartControl.AddPlot(AI.Vector,AI.Vector,System.String,System.Drawing.Color,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Создание графика с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Controls.ChartControl.AddPlot(System.String,System.Drawing.Color,System.Int32,System.Boolean)">
            <summary>
            Создание графика без данных
            </summary>
        </member>
        <member name="M:AI.Charts.Controls.ChartControl.AddData(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Динамическое добавление данных
            </summary>
        </member>
        <member name="M:AI.Charts.Controls.ChartControl.AddBar(AI.Vector,AI.Vector,System.String,System.Drawing.Color)">
            <summary>
            Создание гистограммы с данными
            </summary>
        </member>
        <member name="M:AI.Charts.Controls.ChartControl.ChartImg">
            <summary>
             Отрисовка графика
            </summary>
        </member>
        <member name="M:AI.Charts.Controls.ChartControl.Clear">
            <summary>
            Очистка графика
            </summary>
        </member>
        <member name="M:AI.Charts.Controls.ChartControl.chart1_Click(System.Object,System.EventArgs)">
            <summary>
            Клик по графику
            </summary>
        </member>
        <member name="M:AI.Charts.Controls.ChartControl.chart1_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Мышь опущена
            </summary>
        </member>
        <member name="F:AI.Charts.Controls.ChartControl.components">
            <summary>
            Designer variable used to keep track of non-visual components.
            </summary>
        </member>
        <member name="M:AI.Charts.Controls.ChartControl.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by the control.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AI.Charts.Controls.ChartControl.InitializeComponent">
            <summary>
            This method is required for Windows Forms designer support.
            Do not change the method contents inside the source code editor. The Forms designer might
            not be able to load this method if it was changed manually.
            </summary>
        </member>
        <member name="T:AI.Charts.Controls.DataMethods">
            <summary>
            Description of DataMethods.
            </summary>
        </member>
        <member name="M:AI.Charts.Controls.DataMethods.ReducData3000(AI.Vector,AI.Vector,System.Int32)">
            <summary>
            Прореживание данных, чтобы на графике не было большого числа точек
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Charts.Controls.DataMethods.ImageFromChart(System.Windows.Forms.DataVisualization.Charting.Chart)">
            <summary>
            Получение изображения графика 
            </summary>
            <param name="chart">График</param>
        </member>
        <member name="M:AI.Charts.Controls.DataMethods.GetColorForStyle(System.String)">
            <summary>
            Получение среднего цвета из картинки
            </summary>
            <param name="path">Путь до картинки</param>
        </member>
        <member name="T:AI.Charts.Description">
            <summary>
            Описание для графика
            </summary>
        </member>
        <member name="F:AI.Charts.Description.X">
            <summary>
            Название оси X
            </summary>
        </member>
        <member name="F:AI.Charts.Description.Y">
            <summary>
            Название оси Y
            </summary>
        </member>
        <member name="F:AI.Charts.Description.Name">
            <summary>
            Название графика
            </summary>
        </member>
        <member name="M:AI.Charts.Description.#ctor(System.String,System.String,System.String)">
            <summary>
            Описание графика
            </summary>
            <param name="xL">Название оси X</param>
            <param name="yL">Название оси Y</param>
            <param name="name">Название графика</param>
        </member>
        <member name="T:AI.Charts.GraphicsView">
            <summary>
            Description of GraphicsView.
            </summary>
        </member>
        <member name="M:AI.Charts.GraphicsView.Plot(AI.Vector)">
            <summary>
            График от одной переменной
            </summary>
        </member>
        <member name="M:AI.Charts.GraphicsView.PlotD(AI.Vector)">
            <summary>
            График от одной переменной
            </summary>
        </member>
        <member name="M:AI.Charts.GraphicsView.Plot(AI.Vector,AI.Vector,System.String,System.String,System.Drawing.Color)">
            <summary>
            График от одной переменной
            </summary>
        </member>
        <member name="M:AI.Charts.GraphicsView.Plot(AI.Vector,AI.Vector,System.String,System.String,System.String,System.Drawing.Color)">
            <summary>
            График от одной переменной
            </summary>
        </member>
        <member name="M:AI.Charts.GraphicsView.Plot(AI.Vector,AI.Vector,AI.Charts.Description)">
            <summary>
            График от одной переменной
            </summary>
        </member>
        <member name="M:AI.Charts.GraphicsView.Plot(AI.Vector,AI.Vector,System.Drawing.Color)">
            <summary>
            График от одной переменной
            </summary>
        </member>
        <member name="M:AI.Charts.GraphicsView.Plot(AI.Vector,AI.Vector)">
            <summary>
            График от одной переменной
            </summary>
            <param name="y"></param>
            <param name="x"></param>
        </member>
        <member name="T:AI.Charts.MatrixOut">
            <summary>
            Description of MatrixOut.
            </summary>
        </member>
        <member name="M:AI.Charts.MatrixOut.#ctor(AI.Matrix)">
            <summary>
            Отображение Матрицы
            </summary>
            <param name="matr">Матрица</param>
        </member>
        <member name="F:AI.Charts.MatrixOut.components">
            <summary>
            Designer variable used to keep track of non-visual components.
            </summary>
        </member>
        <member name="M:AI.Charts.MatrixOut.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by the form.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AI.Charts.MatrixOut.InitializeComponent">
            <summary>
            This method is required for Windows Forms designer support.
            Do not change the method contents inside the source code editor. The Forms designer might
            not be able to load this method if it was changed manually.
            </summary>
        </member>
        <member name="T:AI.Charts.MatrixVisual">
            <summary>
            Description of MatrixVisual.
            </summary>
        </member>
        <member name="M:AI.Charts.MatrixVisual.#ctor(AI.Matrix)">
            <summary>
            Визуализация матриц
            </summary>
            <param name="matr"></param>
        </member>
        <member name="M:AI.Charts.MatrixVisual.Visualiz">
            <summary>
            Визуализация матрицы
            </summary>
        </member>
        <member name="F:AI.Charts.MatrixVisual.components">
            <summary>
            Designer variable used to keep track of non-visual components.
            </summary>
        </member>
        <member name="M:AI.Charts.MatrixVisual.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by the form.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AI.Charts.MatrixVisual.InitializeComponent">
            <summary>
            This method is required for Windows Forms designer support.
            Do not change the method contents inside the source code editor. The Forms designer might
            not be able to load this method if it was changed manually.
            </summary>
        </member>
        <member name="T:AI.Charts.VisualPlot">
            <summary>
            Description of VisualPlot.
            </summary>
        </member>
        <member name="M:AI.Charts.VisualPlot.#ctor(AI.Vector)">
            <summary>
            Инициализация формы
            </summary>
        </member>
        <member name="M:AI.Charts.VisualPlot.#ctor(AI.Vector,AI.Vector,System.String,System.String,System.Drawing.Color)">
            <summary>
            Инициализация формы
            </summary>
            <param name="y">Вектор </param>
            <param name="x"></param>
            <param name="nameX"></param>
            <param name="nameY"></param>
            <param name="colorLine"></param>
        </member>
        <member name="M:AI.Charts.VisualPlot.#ctor(AI.Vector,AI.Vector,AI.Charts.Description)">
            <summary>
            Отображение графика
            </summary>
            <param name="y">Y</param>
            <param name="x">X</param>
            <param name="desc">Описание</param>
        </member>
        <member name="M:AI.Charts.VisualPlot.#ctor(AI.Vector,AI.Vector,System.String,System.String,System.String,System.Drawing.Color)">
            <summary>
            Инициализация формы
            </summary>
        </member>
        <member name="M:AI.Charts.VisualPlot.#ctor(AI.Vector,AI.Vector,System.Drawing.Color)">
            <summary>
            Инициализация формы
            </summary>
        </member>
        <member name="M:AI.Charts.VisualPlot.#ctor(AI.Vector,AI.Vector)">
            <summary>
            Инициализация формы
            </summary>
        </member>
        <member name="F:AI.Charts.VisualPlot.components">
            <summary>
            Designer variable used to keep track of non-visual components.
            </summary>
        </member>
        <member name="M:AI.Charts.VisualPlot.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by the form.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AI.Charts.VisualPlot.InitializeComponent">
            <summary>
            This method is required for Windows Forms designer support.
            Do not change the method contents inside the source code editor. The Forms designer might
            not be able to load this method if it was changed manually.
            </summary>
        </member>
        <member name="T:AI.Combinatorics.CombinatoricsBaseFunction">
            <summary>
            Базовые функции коммбинарики
            </summary>
        </member>
        <member name="M:AI.Combinatorics.CombinatoricsBaseFunction.PlacingWithoutRepetition(System.Int32,System.Int32)">
            <summary>
            Размещение без повторов
            </summary>
            <param name="k">Количество элементов</param>
            <param name="n">Количество возможных позиций</param>
        </member>
        <member name="M:AI.Combinatorics.CombinatoricsBaseFunction.NumberOfCombinations(System.Int32,System.Int32)">
            <summary>
            Количество комбинаций
            </summary>
            <param name="k">Количество элементов</param>
            <param name="n">Количество возможных позиций</param>
        </member>
        <member name="T:AI.ComplexVector">
            <summary>
            Класс реализует работу с комплексными векторами
            </summary>
        </member>
        <member name="P:AI.ComplexVector.DataInVector">
            <summary>
            Массив типа Complex содержащий отсчеты вектора
            </summary>
        </member>
        <member name="P:AI.ComplexVector.N">
            <summary>
            Размерность комплексного вектора
            </summary>
        </member>
        <member name="P:AI.ComplexVector.Item(System.Int32)">
            <summary>
            Доступ по индексу
            </summary>
            <param name="i">Индекс</param>
            <returns>Значение вектора</returns>
        </member>
        <member name="M:AI.ComplexVector.#ctor">
            <summary>
            Создает вектор с нулями (0+0j) размерности 3
            </summary>
        </member>
        <member name="M:AI.ComplexVector.#ctor(System.Int32)">
            <summary>
            Создает вектор с нулями (0+0j) размерности n
            </summary>
        </member>
        <member name="M:AI.ComplexVector.#ctor(System.Numerics.Complex[])">
            <summary>
            Создает вектор на основе массива
            </summary>
        </member>
        <member name="M:AI.ComplexVector.#ctor(System.Double[],System.Double[])">
            <summary>
            Создает вектор на основе массивов действительной и мнимой части
            </summary>
            <param name="vectorReal">Действительная часть</param>
            <param name="vectorImg">Мнимая часть</param>
        </member>
        <member name="M:AI.ComplexVector.#ctor(AI.Vector,AI.Vector)">
            <summary>
            Создает вектор на основе векторов действительной и мнимой части
            </summary>
            <param name="vectorReal">Действительная часть</param>
            <param name="vectorImg">Мнимая часть</param>
        </member>
        <member name="M:AI.ComplexVector.#ctor(AI.Vector)">
            <summary>
            Создает вектор на основе векторов действительной части мнимая заполнена нулями
            </summary>
            <param name="vectorReal">Реальная часть</param>
        </member>
        <member name="M:AI.ComplexVector.CutAndZero(System.Int32)">
            <summary>
            Дополнение нулями или обрезание до нужного размера 
            вектора.
            </summary>
            <param name="n">Новый размер</param>
        </member>
        <member name="M:AI.ComplexVector.op_Multiply(AI.ComplexVector,AI.ComplexVector)">
            <summary>
            Поэлементное умножение
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй</param>
            <returns>Результат</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Addition(AI.ComplexVector,AI.ComplexVector)">
            <summary>
            Поэлементное сложение
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй</param>
            <returns>Результат</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Division(AI.ComplexVector,AI.ComplexVector)">
            <summary>
            Поэлементное деление
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй</param>
            <returns>Результат</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Subtraction(AI.ComplexVector,AI.ComplexVector)">
            <summary>
            Поэлементное вычитание
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй</param>
            <returns>Результат</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Multiply(AI.ComplexVector,AI.Vector)">
            <summary>
            Поэлементное умножение на реальный вектор
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй</param>
            <returns>Результат</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Multiply(AI.Vector,AI.ComplexVector)">
            <summary>
            Поэлементное умножение на реальный вектор
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй</param>
            <returns>Результат</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Multiply(System.Numerics.Complex,AI.ComplexVector)">
            <summary>
            Умножение на число
            </summary>
            <param name="k">комплексное число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Subtraction(System.Numerics.Complex,AI.ComplexVector)">
            <summary>
            Вычитание из числа
            </summary>
            <param name="k">комплексное число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Subtraction(AI.ComplexVector,System.Numerics.Complex)">
            <summary>
            Вычитание числа
            </summary>
            <param name="k">комплексное число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Subtraction(System.Double,AI.ComplexVector)">
            <summary>
            Вычитание из числа
            </summary>
            <param name="k">реальное число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Subtraction(AI.ComplexVector,System.Double)">
            <summary>
            Вычитание числа
            </summary>
            <param name="k"> число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Addition(System.Numerics.Complex,AI.ComplexVector)">
            <summary>
            Сложение
            </summary>
            <param name="k">Число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Addition(AI.ComplexVector,System.Numerics.Complex)">
            <summary>
            Сложение
            </summary>
            <param name="k">Число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Addition(System.Double,AI.ComplexVector)">
            <summary>
            Сложение
            </summary>
            <param name="k">Число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Addition(AI.ComplexVector,System.Double)">
            <summary>
            Сложение
            </summary>
            <param name="k">Число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_UnaryNegation(AI.ComplexVector)">
            <summary>
            Отрицание
            </summary>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Multiply(AI.ComplexVector,System.Numerics.Complex)">
            <summary>
            Умножение
            </summary>
            <param name="k">Число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Division(System.Numerics.Complex,AI.ComplexVector)">
            <summary>
            Деление
            </summary>
            <param name="k">Число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_Division(AI.ComplexVector,System.Numerics.Complex)">
            <summary>
            Деление
            </summary>
            <param name="k">Число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_ExclusiveOr(AI.ComplexVector,System.Numerics.Complex)">
            <summary>
            Возведение в степень
            </summary>
            <param name="k">Число</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_LogicalNot(AI.ComplexVector)">
            <summary>
            Комплексно сопряженный вектор
            </summary>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.op_ExclusiveOr(AI.ComplexVector,AI.ComplexVector)">
            <summary>
            Поэлементное возведение
            </summary>
            <param name="B">Вектор степеней</param>
            <param name="A">Комплексный вектор</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.ComplexVector.Copy">
            <summary>
            Копирование вектора
            </summary>
            <returns>Возвращает копию</returns>
        </member>
        <member name="M:AI.ComplexVector.Revers">
             <summary>
            Реверс вектора
             </summary>
        </member>
        <member name="M:AI.ComplexVector.Shift(System.Int32)">
            <summary>
            Сдвиг последовательности на определенное число
            Пример: последовательность 1 2 3 сдвинута на 2
            это 0 0 1 2 3, на 4 это 0 0 0 0 1 2 3
            </summary>
            <param name="valueShift"> На сколько сдвинуть</param>
            <returns>возвращает вектор длинны N+valueShift</returns>
        </member>
        <member name="M:AI.ComplexVector.FurCentr">
            <summary>
            Центровка массива значений полученных при преобразовании Фурье
            </summary>
        </member>
        <member name="M:AI.ComplexVector.ImgToVector">
            <summary>
            Возвращает вектор мнимой части комплексного вектора
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexVector.RealToVector">
            <summary>
            Возвращает вектор действительной части комплексного вектора
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexVector.PhaseToVector">
            <summary>
            Возвращает вектор фаз комплексного вектора
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexVector.MagnitudeToVector">
            <summary>
            Возвращает вектор модулей комплексного вектора
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexVector.Decim(System.Int32)">
            <summary>
            Децимация(прореживание) вектора
            </summary>
            <param name="kDecim">Коэффициент децимации</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexVector.InterpolayrZero(System.Int32)">
            <summary>
            Интерполяция поленомом нулевого порядка
            </summary>
            <param name="kInterp">коэффициент интерполяции</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComplexVector.ToList">
            <summary>
            Преобразование вектора в структуру типа List"Complex" 
            </summary>
        </member>
        <member name="M:AI.ComplexVector.Save(System.String)">
            <summary>
            Сохранение комплексного вектора
            </summary>
            <param name="path">Путь до файла</param>
        </member>
        <member name="M:AI.ComplexVector.Open(System.String)">
            <summary>
            Загрузка комплексного вектора
            </summary>
            <param name="path">Путь до файла</param>		
        </member>
        <member name="T:AI.ComputerVision.BinaryImg">
            <summary>
            Description of BinaryImg.
            </summary>
        </member>
        <member name="P:AI.ComputerVision.BinaryImg.M">
            <summary>
            Ширина
            </summary>
        </member>
        <member name="P:AI.ComputerVision.BinaryImg.N">
            <summary>
            Высота
            </summary>
        </member>
        <member name="P:AI.ComputerVision.BinaryImg.Item(System.Int32,System.Int32)">
            <summary>
            Вывод индекса
            </summary>
        </member>
        <member name="M:AI.ComputerVision.BinaryImg.#ctor(AI.Matrix)">
            <summary>
            Бинарное изображение
            </summary>
            <param name="matr">Матрица серого</param>
        </member>
        <member name="M:AI.ComputerVision.BinaryImg.#ctor(System.Drawing.Bitmap)">
            <summary>
            Бинарное изображение
            </summary>
            <param name="bm">Изображение</param>
        </member>
        <member name="M:AI.ComputerVision.BinaryImg.ToMatrixInvers">
            <summary>
            Бинарное в матрицу
            </summary>
        </member>
        <member name="M:AI.ComputerVision.BinaryImg.ToBmp">
            <summary>
            Бинарное в Bitmap
            </summary>
        </member>
        <member name="T:AI.ComputerVision.CalculateBinaryEl">
            <summary>
            Подсчет объектов
            </summary>
        </member>
        <member name="F:AI.ComputerVision.CalculateBinaryEl.img">
            <summary>
            Изображение
            </summary>
        </member>
        <member name="M:AI.ComputerVision.CalculateBinaryEl.#ctor">
            <summary>
            Подсчет объектов
            </summary>
        </member>
        <member name="M:AI.ComputerVision.CalculateBinaryEl.CalculateBinElements(System.Drawing.Bitmap)">
            <summary>
            Подсчет объектов
            </summary>
            <param name="bmp">Изображение</param>
            <returns>Кол-во объектов</returns>
        </member>
        <member name="M:AI.ComputerVision.CalculateBinaryEl.FilterI(System.Int32,System.Int32)">
            <summary>
            Проход одного шага по фильтрам внутренних углов, с подсчетом углов
            </summary>
            <param name="dx">Смещение по x</param>
            <param name="dy">Смещение по y</param>
        </member>
        <member name="M:AI.ComputerVision.CalculateBinaryEl.FilterE(System.Int32,System.Int32)">
            <summary>
            Проход одного шага по фильтрам внешних углов, с подсчетом углов
            </summary>
            <param name="dx">Смещение по x</param>
            <param name="dy">Смещение по y</param>
        </member>
        <member name="M:AI.ComputerVision.CalculateBinaryEl.Filter(System.Int32,System.Int32)">
            <summary>
            Проход одного шага по внешним и внутренним углам
            </summary>
            <param name="dx">Смещение х</param>
            <param name="dy">Смещение у</param>
        </member>
        <member name="M:AI.ComputerVision.CalculateBinaryEl.Mascs">
            <summary>
            Создание масок для фильтров внеш. и внутр. углов
            </summary>
        </member>
        <member name="T:AI.ComputerVision.FeaturesInBinaryImg">
            <summary>
            Description of FeaturesInBinaryImg.
            </summary>
        </member>
        <member name="M:AI.ComputerVision.FeaturesInBinaryImg.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Фичи из матрицы изобр
            </summary>
            <param name="isRot">Сохранить оригенальный поворот</param>
            <param name="isScale">Сохранить оригенальный масштаб</param>
            <param name="isMove">Сохранить оригенальное смещение</param>
            <param name="nGarm">Количество гармоник, кол-во точек в 2 раза больше</param>
        </member>
        <member name="M:AI.ComputerVision.FeaturesInBinaryImg.MatrixFeatures(AI.Matrix)">
            <summary>
            Генерация вектора частотных признаков из матрицы изображения
            </summary>
            <param name="img">Матрица изображения</param>
            <returns>Коэф. ряда фурье после преобразований</returns>
        </member>
        <member name="M:AI.ComputerVision.FeaturesInBinaryImg.KepstrFeatures(AI.Matrix)">
            <summary>
            Кепстральные коэффициенты
            </summary>
            <param name="img">Изображение</param>
        </member>
        <member name="M:AI.ComputerVision.FeaturesInBinaryImg.GetPoints(AI.Matrix)">
            <summary>
            Выдает точки
            </summary>
            <param name="img">Матрица серого изображения</param>
        </member>
        <member name="T:AI.ComputerVision.ImgFilters">
            <summary>
            Фильтрация изображений
            </summary>
        </member>
        <member name="M:AI.ComputerVision.ImgFilters.SpaceFilter(AI.Matrix,AI.Matrix,System.Double,System.Double)">
            <summary>
            Пространственный фильтр полутонового изображения
            </summary>
            <param name="img">Матрица изображения</param>
            <param name="filter">Матрица фильтра</param>
            <param name="coef">Коэффициент контраста</param>
            <param name="dx">Яркость</param>
            <returns>Возвращает результат фильтрации</returns>
        </member>
        <member name="M:AI.ComputerVision.ImgFilters.ContrastFilter(AI.Matrix,System.Int32,System.Int32)">
            <summary>
            Контрастирование
            </summary>
            <param name="img"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ComputerVision.ImgFilters.FC(AI.Matrix)">
            <summary>
            Алгоритм локального контрастирования
            </summary>
            <param name="img">Изображение</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComputerVision.ImgFilters.MedianFilter(AI.Matrix,AI.Matrix,System.Double,System.Double)">
            <summary>
            Медианный фильтр полутонового изображения
            </summary>
            <param name="img">Матрица изображения</param>
            <param name="filter">Матрица фильтра</param>
            <param name="coef">Коэффициент контраста</param>
            <param name="dx">Яркость</param>
            <returns>Возвращает результат фильтрации</returns>
        </member>
        <member name="M:AI.ComputerVision.ImgFilters.Contrast(AI.Matrix,System.Double,System.Double)">
            <summary>
            Регулировка контраста и яркости
            </summary>
            <param name="img">Матрица изображения</param>
            <param name="coef">Контраст</param>
            <param name="dx">Яркость</param>
            <returns>Итоговое изображение</returns>
        </member>
        <member name="M:AI.ComputerVision.ImgFilters.StdFilter(AI.Matrix,AI.Matrix,System.Double,System.Double)">
            <summary>
            STD фильтр полутонового изображения
            </summary>
            <param name="img">Матрица изображения</param>
            <param name="filter">Матрица фильтра</param>
            <param name="coef">Коэффициент контраста</param>
            <param name="dx">Яркость</param>
            <returns>Возвращает результат фильтрации</returns>
        </member>
        <member name="T:AI.ComputerVision.ImgConverter">
            <summary>
            Конвертирование изображений
            в разные математические типы
            и обратно
            </summary>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.LoadBitmap(System.String)">
            <summary>
            Загрузка картинки
            </summary>
            <param name="fileName">Имя</param>
            <returns>изображение</returns>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.BmpToTensor(System.Drawing.Bitmap)">
            <summary>
            Преобразование изображения в тензор 3-го ранга(нормировка на 1)
            </summary>
            <param name="Bmp">Изображение</param>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.BmpToMatr(System.Drawing.Bitmap)">
            <summary>
            Изображение в полутоновую матрицу
            </summary>
            <param name="Bmp">Изображение</param>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.BmpToHMatr(System.Drawing.Bitmap)">
            <summary>
            Преобразование картинки в матрицу H компонент
            H принадлежит интервалу [0,1]
            </summary>
            <param name="Bmp">Картинка</param>
            <returns></returns>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.Visualiz(AI.Matrix)">
            <summary>
            Визуализация матрицы
            </summary>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.MatrixToBitmap(AI.Matrix)">
            <summary>
            Перевод матрицы в полутоновое изображение
            </summary>
        </member>
        <member name="M:AI.ComputerVision.ImgConverter.TensorToBitmap(AI.Tensor)">
            <summary>
            Тензор в картинку
            </summary>
            <param name="tensor">Тензор</param>
            <returns>Bitmap</returns>
        </member>
        <member name="T:AI.ComputerVision.ObjectGenerate">
            <summary>
            Description of ObjectGenerate.
            </summary>
        </member>
        <member name="M:AI.ComputerVision.ObjectGenerate.#ctor(System.Int32,System.Int32)">
            <summary>
             Генерация объектов
            </summary>
            <param name="w">Ширина холста</param>
            <param name="h">Высота холста</param>
        </member>
        <member name="M:AI.ComputerVision.ObjectGenerate.Generate(System.Int32)">
            <summary>
            Генерация изображения
            </summary>
            <returns>Вывод изображения</returns>
        </member>
        <member name="T:AI.ComputerVision.Retinex">
            <summary>
            Description of Retinex.
            </summary>
        </member>
        <member name="M:AI.ComputerVision.Retinex.#ctor">
            <summary>
            Ретинекс
            </summary>
        </member>
        <member name="M:AI.ComputerVision.Retinex.Retin(System.Drawing.Bitmap)">
            <summary>
            Ретинекс
            </summary>
            <param name="bm">Картинка</param>
            <returns></returns>
        </member>
        <member name="T:AI.Correlation">
            <summary>
            Класс реализует авто- и взаимо- кореляционные функции
            Для действительных и комплексных векторов
            </summary>
        </member>
        <member name="M:AI.Correlation.CrossCorrelation(AI.Vector,AI.Vector)">
            <summary>
            Взаимокорелляция двух действительных векторов
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй вектор</param>
            <returns>Возвращает отсчеты ВКФ</returns>
        </member>
        <member name="M:AI.Correlation.CrossCorrelationF(AI.Vector,AI.Vector)">
            <summary>
            Взаимокорелляция двух действительных векторов
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй вектор</param>
            <returns>Возвращает отсчеты ВКФ</returns>
        </member>
        <member name="M:AI.Correlation.CrossCorrelation(AI.ComplexVector,AI.ComplexVector)">
            <summary>
            Взаимокорелляция двух комплексных векторов
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй вектор</param>
            <returns>Возвращает отсчеты ВКФ</returns>
        </member>
        <member name="M:AI.Correlation.AutoCorrelation(AI.Vector)">
            <summary>
            Автокорелляция действительного векторов
            </summary>
            <param name="A">Вектор</param>
            <returns>Возвращает осчеты АКФ</returns>
        </member>
        <member name="M:AI.Correlation.AutoCorrelation(AI.ComplexVector)">
            <summary>
            Автокорелляция комплексного векторов
            </summary>
            <param name="A">Вектор</param>
            <returns>Возвращает осчеты АКФ</returns>	
        </member>
        <member name="M:AI.Correlation.AutoCorrelationF(AI.Vector)">
            <summary>
            Автокорелляция действительного векторов
            </summary>
            <param name="A">Вектор</param>
            <returns>Возвращает осчеты АКФ</returns>
        </member>
        <member name="M:AI.Correlation.PatternSerch(AI.Vector,AI.Vector)">
            <summary>
            Поиск паттернов в векторе
            </summary>
            <param name="vect">вектор</param>
            <param name="pattern">паттерн</param>
            <returns>Вектор описывающий похожесть сигнала на патерн</returns>
        </member>
        <member name="M:AI.Correlation.PatternSerch(AI.Vector,AI.Vector,System.Int32)">
            <summary>
            Поиск паттернов в векторе
            </summary>
            <param name="vect">Вектор</param>
            <param name="pattern">Паттерн</param>
            <param name="windowSize">Окно для поиска</param>
            <returns>Вектор описывающий похожесть сигнала на патерн</returns>
        </member>
        <member name="T:AI.AdditionalFunctions.MathFunc">
            <summary>
            Математические функции для векторов и матриц
            </summary>
        </member>
        <member name="P:AI.AdditionalFunctions.MathFunc.SqrtPi">
            <summary>
            Квадратный корень из ПИ
            </summary>
        </member>
        <member name="P:AI.AdditionalFunctions.MathFunc.Sqrt2">
            <summary>
            Квадратный корень из 2-х
            </summary>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.erf(System.Double)">
            <summary>
            Функция ошибки
            </summary>
            <param name="x">Аргумент</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.erf(AI.Vector)">
            <summary>
            Функция ошибок
            </summary>
            <param name="Inp">Входной вектор</param>
            <returns></returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.GenerateTheSequence(System.Double,System.Double,System.Double)">
            <summary>
            Генерирование последовательности
            </summary>
            <param name="began">Начальное значение</param>
            <param name="step">Шаг</param>
            <param name="end">Конечное значение</param>
            <returns>Возвращает последовательность</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.GenerateTheSequence(System.Double,System.Double)">
            <summary>
            Генерирование последовательности
            </summary>
            <param name="began">Начальное значение</param>
            <param name="end">Конечное значение</param>
            <returns>Возвращает послеовательность с шагом 1</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.GradToRad(System.Double)">
            <summary>
            Перевод градусов в радианы
            </summary>
            <param name="grad">значение в градусах</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.GradToRad(AI.Vector)">
            <summary>
            Перевод градусов в радианы
            </summary>
            <param name="Inp">значения в градусах</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.RadToGrad(System.Double)">
            <summary>
            Перевод радиан в градусы
            </summary>
            <param name="rad">значение в радианах</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.RadToGrad(AI.Vector)">
            <summary>
            Перевод радиан в градусы
            </summary>
            <param name="Inp">значение в радианах</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.factorial(System.Double)">
            <summary>
            Вычисление факториала числа
            </summary>
            <param name="x">Число</param>
            <returns>Факториал</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.factorial(AI.Vector)">
            <summary>
            Вычисление факториала векторов поэлементно
            </summary>
            <param name="Inp">Входной вектор</param>
            <returns>Факториал</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.sin(AI.Vector)">
            <summary>
            Вычисление синусов
            </summary>
            <param name="Inp">Вектор углов(в радианах)</param>
            <returns>Вектор синусов</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.round(AI.Vector,System.Int32)">
            <summary>
            Округление
            </summary>
            <param name="Inp">Вектор входа</param>
            <param name="digits">до какого знака</param>
            <returns>Вектор выхода</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.cos(AI.Vector)">
            <summary>
            Вычисление косинусов
            </summary>
            <param name="Inp">Вектор углов(в радианах)</param>
            <returns>Вектор косинусов</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.tg(AI.Vector)">
            <summary>
            Вычисление тангенсов
            </summary>
            <param name="Inp">Вектор углов(в радианах)</param>
            <returns>Вектор тангенсов</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.ctg(AI.Vector)">
            <summary>
            Вычисление котангенсов
            </summary>
            <param name="Inp">Вектор углов(в радианах)</param>
            <returns>Вектор котангенсов</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.arcsin(AI.Vector)">
            <summary>
            Вычисление арксинусов
            </summary>
            <param name="Inp">Вектор синусов</param>
            <returns>Вектор углов(в радианах)</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.arccos(AI.Vector)">
            <summary>
            Вычисление арккосинусов
            </summary>
            <param name="Inp">Вектор косинусов</param>
            <returns>Вектор углов(в радианах)</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.arctg(AI.Vector)">
            <summary>
            Вычисление арктангенсов
            </summary>
            <param name="Inp">Вектор тангенсов</param>
            <returns>Вектор углов(в радианах)</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.lg(AI.Vector)">
            <summary>
            Дсятичный логарифм
            </summary>
            <param name="Inp">Подлогарифмическое число</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.ln(AI.Vector)">
            <summary>
            Логарифм по основанию "e"
            </summary>
            <param name="Inp">Подлогарифмическое число</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.sec(AI.Vector)">
            <summary>
            Секанс угла
            </summary>
            <param name="Inp">углы</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.cosec(AI.Vector)">
            <summary>
            Косеканс угла
            </summary>
            <param name="Inp">углы</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.exp(AI.Vector)">
            <summary>
            Экспонента e^x
            </summary>
            <param name="Inp">показатели степени</param>
            <returns>e^Inp - поэлементно</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.tanh(AI.Vector)">
            <summary>
            Гиперболический тангенс
            </summary>
            <param name="Inp">углы</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.sign(AI.Vector)">
            <summary>
            Определение знака
            </summary>
            <param name="Inp">Входной вектор</param>
            <returns></returns>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.sqrt(AI.Vector)">
            <summary>
            Квадратный корень
            </summary>
            <param name="Inp">числа</param>		
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.sin(AI.Matrix)">
            <summary>
            Вычисление синуса
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.exp(AI.Matrix)">
            <summary>
            e^x
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.tanh(AI.Matrix)">
            <summary>
            Гиперболический тангенс
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.cos(AI.Matrix)">
            <summary>
            Косинус
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.tg(AI.Matrix)">
            <summary>
            Тангенс
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.ctg(AI.Matrix)">
            <summary>
            Котангенс
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.arcsin(AI.Matrix)">
            <summary>
            Арксинус
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.arccos(AI.Matrix)">
            <summary>
            Арккосинус
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.arctg(AI.Matrix)">
            <summary>
            Арктангенс
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.abs(AI.Matrix)">
            <summary>
            Модуль
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.sqrt(AI.Matrix)">
            <summary>
            Квадратный корень
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.lg(AI.Matrix)">
            <summary>
            Десятичный логарифм
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.ln(AI.Matrix)">
            <summary>
            Логарифм по основанию E
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.sec(AI.Matrix)">
            <summary>
            Секонс
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.cosec(AI.Matrix)">
            <summary>
            Косеконс
            </summary>
            <param name="Inp">Матрица значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.sin(AI.ComplexVector)">
            <summary>
            Синус
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>	
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.exp(AI.ComplexVector)">
            <summary>
            e^x
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.tanh(AI.ComplexVector)">
            <summary>
            Гиперболический тангенс
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.sqrt(AI.ComplexVector)">
            <summary>
            Квадратный корень
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.cos(AI.ComplexVector)">
            <summary>
            Косинус
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.lg(AI.ComplexVector)">
            <summary>
            Логарифм по основанию 10
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.ln(AI.ComplexVector)">
            <summary>
            Логарифм по основанию e
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.tg(AI.ComplexVector)">
            <summary>
            Тангенс
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.ctg(AI.ComplexVector)">
            <summary>
            Котангенс
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.arcsin(AI.ComplexVector)">
            <summary>
            Арксинус
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.arccos(AI.ComplexVector)">
            <summary>
            Арккосинус
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.arctg(AI.ComplexVector)">
            <summary>
            Арктангенс
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.sec(AI.ComplexVector)">
            <summary>
            Секонс
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.cosec(AI.ComplexVector)">
            <summary>
            Косеконс
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.abs(AI.Vector)">
            <summary>
            Модуль
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="M:AI.AdditionalFunctions.MathFunc.abs(AI.ComplexVector)">
            <summary>
            Модуль
            </summary>
            <param name="Inp">Комплексный вектор значений для преобразования</param>
        </member>
        <member name="T:AI.AdditionalFunctions.NeuroFunc">
            <summary>
            Функции активации нейронов
            </summary>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Sigmoid(AI.Vector,System.Double)">
            <summary>
            Сигмоидальная однополярная активационная ф-я
            </summary>
            <param name="Inp">Входной вектор</param>
            <param name="betta">Угол наклона</param>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Sigmoid(System.Double,System.Double)">
            <summary>
            Сигмоидальная однополярная активационная ф-я
            </summary>
            <param name="x">Входное значение</param>
            <param name="betta">Угол наклона</param>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.InverseSigmoid(System.Double,System.Double)">
            <summary>
            Сигмоидальная однополярная активационная ф-я
            </summary>
            <param name="x">Входное значение</param>
            <param name="betta">Угол наклона</param>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.InverseSigmoid(AI.Vector,System.Double)">
            <summary>
            Сигмоидальная однополярная активационная ф-я
            </summary>
            <param name="x">Входное значение</param>
            <param name="betta">Угол наклона</param>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.SigmoidBiplyar(AI.Vector,System.Double)">
            <summary>
            Сигмоидальная биполярная активационная ф-я
            </summary>
            <param name="Inp">Входной вектор</param>
            <param name="betta">Угол наклона</param>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Threshold(AI.Vector,System.Double)">
            <summary>
            Пороговая активационная ф-я
            </summary>
            <param name="Inp">Входной вектор</param>
            <param name="threshold">Порог</param>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Threshold(AI.Vector,System.Double,System.Double)">
            <summary>
            Ограничение сверху и снизу
            </summary>
            <param name="Inp">Входной вектор</param>
            <param name="thresholdUp"></param>
            <param name="thresholdDoun"></param>
            <returns></returns>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Relu(AI.Vector,System.Double)">
            <summary>
            Релу
            </summary>
            <param name="Inp"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Relu(AI.Vector,System.Double,System.Double)">
            <summary>
            Активация Релу
            </summary>
            <param name="Inp">Вход</param>
            <param name="thresholdUp">Верхний порог</param>
            <param name="thresholdDoun">Нижний порог</param>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Relu(AI.Matrix,System.Double,System.Double)">
            <summary>
            Активация Релу
            </summary>
            <param name="Inp">Вход</param>
            <param name="thresholdUp">Верхний порог</param>
            <param name="thresholdDoun">Нижний порог</param>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Sigmoid(AI.Matrix,System.Double)">
            <summary>
            Сигмоида
            </summary>
            <param name="Inp"></param>
            <param name="betta"></param>
            <returns></returns>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.SigmoidBiplyar(AI.Matrix,System.Double)">
            <summary>
            Сигмоида
            </summary>
            <param name="Inp"></param>
            <param name="betta"></param>
            <returns></returns>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Threshold(AI.Matrix,System.Double)">
            <summary>
            Сигмоида
            </summary>
            <param name="Inp"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Sigmoid(AI.Tensor,System.Double)">
            <summary>
            Сигмоида
            </summary>
            <param name="tensor">Тензор входа</param>
            <param name="betta">Коэфициент наклона</param>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Log10(AI.Tensor)">
            <summary>
            Логарифм по основанию 10
            </summary>
            <param name="tensor">Тензор входа</param>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Relu(AI.Matrix,System.Double)">
            <summary>
            Активация Релу
            </summary>
            <param name="Inp">Вход</param>
            <param name="threshold">Нижний порог</param>
        </member>
        <member name="M:AI.AdditionalFunctions.NeuroFunc.Relu(AI.Vector[],System.Double)">
            <summary>
            Активация Релу
            </summary>
            <param name="Inp">Вход</param>
            <param name="threshold">Нижний порог</param>
        </member>
        <member name="T:AI.AdditionalFunctions.DistributionFunc">
            <summary>
            Функции распределения случайной величины
            </summary>
        </member>
        <member name="M:AI.AdditionalFunctions.DistributionFunc.Gauss(AI.Vector,System.Double,System.Double)">
            <summary>
            Функция распределения по нормальному закону 
            </summary>
            <param name="Inp">Входной вектор</param>
            <param name="m">Мат. ожидание</param>
            <param name="sko">СКО</param>
        </member>
        <member name="M:AI.AdditionalFunctions.DistributionFunc.Gauss(System.Double,System.Double,System.Double)">
            <summary>
            Функция вероятность принадлежности
            </summary>
            <param name="Inp">Входное значение</param>
            <param name="m">Мат. ожидание</param>
            <param name="sko">СКО</param>
        </member>
        <member name="M:AI.AdditionalFunctions.DistributionFunc.Gauss1(AI.Matrix,System.Double,System.Double)">
            <summary>
            Функция Гаусса при x=m -> G(x) = 1
            </summary>
            <param name="inp"></param>
            <param name="m"></param>
            <param name="sko"></param>
            <returns></returns>
        </member>
        <member name="M:AI.AdditionalFunctions.DistributionFunc.GaussNorm1(System.Double,System.Double,System.Double)">
            <summary>
            Функция вероятность принадлежности при inp = m, out = 1
            </summary>
            <param name="Inp">Входное значение</param>
            <param name="m">Мат. ожидание</param>
            <param name="std">СКО</param>
        </member>
        <member name="M:AI.AdditionalFunctions.DistributionFunc.GaussNorm1(AI.Vector,System.Double,System.Double)">
            <summary>
            Функция вероятность принадлежности при inp = m, out = 1
            </summary>
            <param name="Inp">Входной вектор</param>
            <param name="m">Мат. ожидание</param>
            <param name="std">СКО</param>
        </member>
        <member name="M:AI.AdditionalFunctions.DistributionFunc.Puasson(AI.Vector,System.Double)">
            <summary>
            Функция распределения Пуасона 
            </summary>
            <param name="Inp">Входной вектор</param>
            <param name="m">Мат. ожидание от 0 до +inf</param>
        </member>
        <member name="T:AI.AdditionalFunctions.GeomFunc">
            <summary>
            Аналитическая геометрия
            </summary>
        </member>
        <member name="M:AI.AdditionalFunctions.GeomFunc.NormVect(AI.Vector)">
            <summary>
            Вычисляет эвклидовую норму вектора 
            </summary>
            <param name="vector">Входной вектор</param>
        </member>
        <member name="M:AI.AdditionalFunctions.GeomFunc.ScalarProduct(AI.Vector,AI.Vector)">
            <summary>
            Скалярное произведение 2-х векторов
            </summary>
            <param name="vector">Первый вектор</param>
            <param name="vector2">Второй вектор</param>
            <returns>Возвращает скалярное произведение</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.GeomFunc.ProectionAtoB(AI.Vector,AI.Vector)">
            <summary>
            Проекция вектора А на вектор B
            </summary>
            <param name="A">Вектор А</param>
            <param name="B">Вуктор В</param>
            <returns>Результат проецирования</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.GeomFunc.AngleVect(AI.Vector,AI.Vector)">
            <summary>
            Угол между векторами
            </summary>
            <param name="vector">Первый вектор</param>
            <param name="vector2">Второй вектор</param>
            <returns>Возвращает угол в радианах</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.GeomFunc.VectorFromAToB(AI.Vector,AI.Vector)">
            <summary>
            Вычисляет вектор соединяющий точку А с точкой Б
            </summary>
            <param name="pointA">координаты точки А</param>
            <param name="pointB">координаты точки Б</param>
            <returns>Возвращает компаненты вектора</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.GeomFunc.DistanceFromAToB(AI.Vector,AI.Vector)">
            <summary>
            Вычисляет растояние от точки А до Б
            </summary>
            <param name="pointA">координаты точки А</param>
            <param name="pointB">координаты точки Б</param>
            <returns>Возвращает растояние</returns>
        </member>
        <member name="M:AI.AdditionalFunctions.GeomFunc.VectorRotate(AI.Vector,System.Double,System.Int32,System.Int32)">
            <summary>
            Поворот вектора на заданные углы
            </summary>
        </member>
        <member name="T:AI.Functions">
            <summary>
            Математические фукции
            </summary>
        </member>
        <member name="M:AI.Functions.NextPow2(System.Int32)">
            <summary>
            Следующая степень числа 2
            </summary>
            <param name="n">входное число</param>
            <returns></returns>
        </member>
        <member name="M:AI.Functions.Summ(System.Double[])">
            <summary>
            Суммирование всех элементов массива типа double
            </summary>
        </member>
        <member name="M:AI.Functions.Summ(AI.Vector[])">
            <summary>
            Поэлементная сумма
            </summary>
            <param name="vectors">Массив векторов</param>
            <returns>Результирующий вектор</returns>
        </member>
        <member name="M:AI.Functions.Summ(AI.Vector)">
            <summary>
            Суммирование всех элементов действительного вектора
            </summary>
        </member>
        <member name="M:AI.Functions.Summ(AI.ComplexVector)">
            <summary>
            Суммирование всех элементов комплексного вектора
            </summary>
        </member>
        <member name="M:AI.Functions.Summ(System.Int32[])">
            <summary>
            Суммирование всех элементов массива типа int
            </summary>
        </member>
        <member name="M:AI.Functions.IntegralInterp(AI.Vector)">
            <summary>
            Вычисляет интегральную функцию действительный вектор
            Входной вектор апроксиммирован полиномом 0-го порядка
            с коэфициентом 2
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Functions.Integral(AI.Vector)">
            <summary>
            Вычисляет интегральную функцию действительный вектор
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Functions.Integral(AI.Vector,System.Double,System.Double)">
            <summary>
            Вычисляет определенный интеграл
            </summary>
            <param name="A">Входной действительный вектор</param>
            <param name="a">Нижний предел</param>
            <param name="b">Верхний предел</param>
        </member>
        <member name="M:AI.Functions.WindowFunc(AI.Vector,System.Func{AI.Vector,AI.Vector},System.Int32)">
            <summary>
            Реализация оконных функций
            </summary>
            <param name="vect">входной вектор</param>
            <param name="Function">функция</param>
            <param name="window">окно</param>
            <returns>Результат применения ф-и</returns>
        </member>
        <member name="M:AI.Functions.WindowFuncDouble(AI.Vector,System.Func{AI.Vector,System.Double},System.Int32)">
            <summary>
            Реализация оконных функций
            </summary>
            <param name="vect">входной вектор</param>
            <param name="Function">функция</param>
            <param name="window">окно</param>
            <returns>Результат применения ф-и</returns>
        </member>
        <member name="M:AI.Functions.WindowFuncDouble(AI.Vector,System.Func{AI.Vector,System.Double},System.Int32,System.Int32)">
            <summary>
            Реализация оконных функций
            </summary>
            <param name="vect">входной вектор</param>
            <param name="Function">функция</param>
            <param name="window">окно</param>
            <param name="stride">шаг</param>
            <returns>Результат применения ф-и</returns>
        </member>
        <member name="M:AI.Functions.Integral(AI.Vector,System.Double)">
            <summary>
            Вычисляет определенный интеграл
            </summary>
            <param name="A">Входной действительный вектор</param>
            <param name="b">Верхний предел(Нижний предел равен первому значению)</param>
        </member>
        <member name="M:AI.Functions.Diff(AI.Vector)">
            <summary>
            Вычисляет диференциальную функцию действительный вектор
            </summary>
            <param name="A"> Входной вектор</param>
        </member>
        <member name="M:AI.Functions.Diff(AI.ComplexVector)">
            <summary>
            Вычисляет диференциальную функцию комплексный вектор
            </summary>
            <param name="A">Входной вектор</param>
        </member>
        <member name="M:AI.Functions.Integral(AI.Vector,System.Int32)">
            <summary>
            Вычисляет кратный интеграл по dx
            </summary>
            <param name="A">Входной вектор</param>
            <param name="k">Кратность 1, 2, 3 ....</param>
            <returns>Действительный вектор</returns>
        </member>
        <member name="M:AI.Functions.Integral(AI.ComplexVector,System.Int32)">
            <summary>
            Вычисляет кратный интеграл по dx
            </summary>
            <param name="A">Входной вектор</param>
            <param name="k">Кратность 1, 2, 3 ....</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.Functions.Diff(AI.ComplexVector,System.Int32)">
            <summary>
            Вычисляет i-ю производную по dx
            </summary>
            <param name="A">Входной вектор</param>
            <param name="i">Порядок производной 1, 2, 3 ....</param>
            <returns>Комплексный вектор</returns>
        </member>
        <member name="M:AI.Functions.Diff(AI.Vector,System.Int32)">
            <summary>
            Вычисляет i-ю производную по dx
            </summary>
            <param name="A">Входной вектор</param>
            <param name="i">Порядок производной 1, 2, 3 ....</param>
            <returns>Действительный вектор</returns>
        </member>
        <member name="M:AI.Functions.Integral(AI.ComplexVector)">
            <summary>
            Вычисляет интегральную функцию комплексный вектор
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Functions.Multiplication(System.Double[])">
            <summary>
            Перемножение всех элементов массива типа double
            </summary>
        </member>
        <member name="M:AI.Functions.Multiplication(AI.Vector)">
            <summary>
            Перемножение всех элементов действительного вектора
            </summary>
        </member>
        <member name="M:AI.Functions.Multiplication(System.Int32[])">
            <summary>
            Перемножение всех элементов массива типа int
            </summary>
        </member>
        <member name="T:AI.Furie">
            <summary>
            Преобразование Фурье
            </summary>
        </member>
        <member name="P:AI.Furie.rotateCoef">
            <summary>
            Вектор поворота
            </summary>
        </member>
        <member name="F:AI.Furie._n">
            <summary>
            Кол-во
            </summary>
        </member>
        <member name="M:AI.Furie.#ctor(System.Int32)">
            <summary>
            Фурье
            </summary>
        </member>
        <member name="M:AI.Furie.FFT(AI.Vector)">
            <summary>
            Быстрое Фурье
            </summary>
            <param name="inp"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Furie.RealIFFT(AI.ComplexVector)">
            <summary>
            Реальная часть ОБПФ
            </summary>
            <param name="cInp">Комплексный вектор</param>
        </member>
        <member name="M:AI.Furie.RealIFFT2(AI.ComplexVector)">
            <summary>
            Реальная часть БПФ(не нормировано на кол-во)
            </summary>
            <param name="cInp">Комплексный вектор</param>
        </member>
        <member name="M:AI.Furie.GetSpectr(AI.Vector,System.Func{System.Int32,AI.Vector})">
            <summary>
            Выдает спектр сигнала от 0 до fd/2
            </summary>
            <param name="input">Вектор входа</param>
            <param name="window">Оконная ф-я</param>
            <returns>Спектр сигнала</returns>
        </member>
        <member name="M:AI.Furie.IFFT(AI.ComplexVector)">
            <summary>
            ОБПФ
            </summary>
            <param name="inp">Вход</param>
        </member>
        <member name="M:AI.Furie.ifft(System.Numerics.Complex[])">
            <summary>
            Возвращает спектр сигнала
            </summary>
            <param name="inp">Массив значений сигнала. Количество значений должно быть степенью 2</param>
            <returns>Массив со значениями спектра сигнала</returns>
        </member>
        <member name="M:AI.Furie.fft(AI.ComplexVector)">
            <summary>
            Возвращает комплексный вектор спектра сигнала
            </summary>
            <param name="inp">Массив значений сигнала. Количество значений должно быть степенью 2</param>
            <returns>Массив со значениями спектра сигнала</returns>
        </member>
        <member name="M:AI.Furie.fft(AI.Vector)">
            <summary>
            Быстрое преобразование Фурье(БПФ)
            </summary>
            <param name="inp">Входной вектор</param>
        </member>
        <member name="M:AI.Furie.ifft1(AI.ComplexVector)">
            <summary>
            Возвращает комплексный вектор спектра сигнала
            </summary>
            <param name="inp">Массив значений сигнала. Количество значений должно быть степенью 2</param>
            <returns>Массив со значениями спектра сигнала</returns>
        </member>
        <member name="M:AI.Furie.ifft(AI.ComplexVector)">
            <summary>
            ОБПФ
            </summary>
            <param name="A">Входной вектор</param>
        </member>
        <member name="M:AI.Furie.ifft(AI.Vector)">
            <summary>
            ОБПФ
            </summary>
            <param name="A">Входной вектор</param>
        </member>
        <member name="M:AI.Furie.DPF(AI.Vector)">
            <summary>
            Дискретное преобразование Фурье
            </summary>
            <param name="x">Входной действительный вектор</param>
        </member>
        <member name="M:AI.Furie.DPF(AI.ComplexVector)">
            <summary>
            Дискретное преобразование Фурье
            </summary>
            <param name="x">Входной комплесный вектор</param>
        </member>
        <member name="M:AI.Furie.ODPF(AI.Vector)">
            <summary>
            Обратное дискретное преобразование Фурье
            </summary>
            <param name="x">Входной действительный вектор</param>
        </member>
        <member name="M:AI.Furie.ODPF(AI.ComplexVector)">
            <summary>
            Обратное дискретное преобразование Фурье
            </summary>
            <param name="x">Входной действительный вектор</param>
        </member>
        <member name="M:AI.Furie.TimeFrTransform(AI.Vector,System.Int32)">
            <summary>
            Чачтотно-временное преобразование
            </summary>
            <param name="vect">Вектор</param>
            <param name="lenFr">Размер фрейма</param>
        </member>
        <member name="T:AI.WindowForFFT">
            <summary>
            Оконные ф-ии БПФ
            </summary>
        </member>
        <member name="M:AI.WindowForFFT.HannWindow(System.Int32)">
            <summary>
            Окно ханна дает уровень боковых лепестков -31.5 db
            </summary>
            <param name="windowSize">Размер окна</param>
        </member>
        <member name="M:AI.WindowForFFT.HammingWindow(System.Int32)">
            <summary>
            Окно Хэмминга дает уровень боковых лепестков -42 db
            </summary>
            <param name="windowSize">Размер окна</param>
        </member>
        <member name="M:AI.WindowForFFT.RectWindow(System.Int32)">
            <summary>
            Прямоугольное окно дает уровень боковых лепестков -13 db
            </summary>
            <param name="windowSize">Размер окна</param>
        </member>
        <member name="M:AI.WindowForFFT.BlackmanWindow(System.Int32)">
            <summary>
            Окно Блэкмана дает уровень боковых лепестков -58 db
            </summary>
            <param name="windowSize">Размер окна</param>
        </member>
        <member name="T:AI.FLV">
            <summary>
            Не четкая логическая переменная, Fuzzy Logic Variable(FLV)
            </summary>
        </member>
        <member name="P:AI.FLV.Flv">
            <summary>
            Нечеткая логическая переменная
            </summary>
        </member>
        <member name="M:AI.FLV.#ctor">
            <summary>
            Конструктор по умолчанию
            </summary>
        </member>
        <member name="M:AI.FLV.#ctor(System.Double)">
            <summary>
            Конструктор
            </summary>
            <param name="flv">численное значение нечеткой переменной</param>
        </member>
        <member name="M:AI.FLV.op_LogicalNot(AI.FLV)">
            Не 
        </member>
        <member name="M:AI.FLV.op_BitwiseAnd(AI.FLV,AI.FLV)">
            И
        </member>
        <member name="M:AI.FLV.op_BitwiseOr(AI.FLV,AI.FLV)">
            <summary>
            Или
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:AI.IMathStruct">
            <summary>
            Интерфейс математической структуры
            </summary>
        </member>
        <member name="T:AI.InformationBlock">
            <summary>
            Информационный блок, основной тип данных МАС
            </summary>
        </member>
        <member name="P:AI.InformationBlock.TextInform">
            <summary>
            Текстовая информация
            </summary>
        </member>
        <member name="P:AI.InformationBlock.ImageInform">
            <summary>
            Графическая информация
            </summary>
        </member>
        <member name="P:AI.InformationBlock.SingnalInform">
            <summary>
            Информация в векторном виде
            </summary>
        </member>
        <member name="P:AI.InformationBlock.MatrixInform">
            <summary>
            Информация в матричном виде
            </summary>
        </member>
        <member name="P:AI.InformationBlock.TensorInform">
            <summary>
            Информация в тензорном виде
            </summary>
        </member>
        <member name="P:AI.InformationBlock.Flag">
            <summary>
            Найден ли ответ
            </summary>
        </member>
        <member name="F:AI.InformationBlock.namedVar">
            <summary>
            Именованные переменные
            </summary>
        </member>
        <member name="F:AI.InformationBlock.mainVar">
            <summary>
            Основная переменная
            </summary>
        </member>
        <member name="M:AI.InformationBlock.ToString">
            <summary>
            Вывод в строку
            </summary>
            <returns></returns>
        </member>
        <member name="T:AI.Var">
            <summary>
            Переменная инф. блока
            </summary>
        </member>
        <member name="F:AI.Var.Str">
            <summary>
            Строка
            </summary>
        </member>
        <member name="F:AI.Var.Int">
            <summary>
            Целочисленное
            </summary>
        </member>
        <member name="F:AI.Var.Doub">
            <summary>
            С плав. запятой
            </summary>
        </member>
        <member name="T:AI.Matrix">
            <summary>
            Класс реализующий матрицы и операции над ними
            </summary>
            
        </member>
        <member name="P:AI.Matrix.Matr">
            <summary>
            Массив значений в матрице
            </summary>
        </member>
        <member name="P:AI.Matrix.H">
            <summary>
            Высота
            </summary>
        </member>
        <member name="P:AI.Matrix.W">
            <summary>
            Ширина
            </summary>
        </member>
        <member name="P:AI.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Элемент матрицы
            </summary>
        </member>
        <member name="M:AI.Matrix.#ctor">
            <summary>
            Создает матрицу со всеми нулями размерности 3х3
            </summary>
        </member>
        <member name="M:AI.Matrix.#ctor(System.Double[0:,0:])">
            <summary>
            Создает матрицу на основе двумерного массива
            </summary>
        </member>
        <member name="M:AI.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Создает матрицу со всеми нулями размерности MxN
            </summary>
        </member>
        <member name="M:AI.Matrix.op_Addition(AI.Matrix,AI.Matrix)">
            <summary>
             сложение 
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.op_Addition(AI.Matrix,System.Double)">
            <summary>
             сложение 
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.op_Addition(System.Double,AI.Matrix)">
            
        </member>
        <member name="M:AI.Matrix.op_Subtraction(AI.Matrix,System.Double)">
            <summary>
            вычитание
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.op_Subtraction(System.Double,AI.Matrix)">
            <summary>
            вычитание
            </summary>
            <param name="k"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.op_Subtraction(AI.Matrix,AI.Matrix)">
            <summary>
             вычитание матриц
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.op_Multiply(AI.Matrix,System.Double)">
            
        </member>
        <member name="M:AI.Matrix.op_Division(AI.Matrix,System.Double)">
            	
        </member>
        <member name="M:AI.Matrix.op_Division(System.Double,AI.Matrix)">
            <summary>
             Умножение матрицы на число	
            </summary>
            <param name="k"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.op_Multiply(System.Double,AI.Matrix)">
            <summary>
            Умножение вектора на матрицу
            </summary>
            <param name="k"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.op_Multiply(AI.Matrix,AI.Vector)">
            <summary>
            Умножение вектора на матрицу
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.op_Multiply(AI.Vector,AI.Matrix)">
            <summary>
            Умножение вектора на матрицу
            </summary>
            <param name="B"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.op_Multiply(AI.Matrix,AI.Matrix)">
            <summary>
            Умножение матриц
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.ToVector">
            <summary>
             Преобразование матрицы в вектор
            </summary>
        </member>
        <member name="M:AI.Matrix.Tr">
            <summary>
            Транспонирование матрицы
            </summary>
            <returns>Возвращает транспонированную матрицу</returns>
        </member>
        <member name="M:AI.Matrix.Visual">
            <summary>
            Визуализация матриц
            </summary>
        </member>
        <member name="M:AI.Matrix.Pow(AI.Matrix,System.Int32)">
            <summary>
            Возведение матрицы в степень 
            путем матричного умножения на саму себя
            </summary>
            <param name="A">Входная матрица</param>
            <param name="stepen">Степень</param>
        </member>
        <member name="M:AI.Matrix.Copy">
            <summary>
            Копирование матрицы
            </summary>
            <returns>Возвращает копию</returns>
        </member>
        <member name="M:AI.Matrix.Spagetiz">
            <summary>
            Вытягивает матрицу в вектор
            </summary>
        </member>
        <member name="M:AI.Matrix.ToString">
            <summary>
            Выводит значение элементов матрицы в виде текста
            </summary>
        </member>
        <member name="M:AI.Matrix.ToString(System.String)">
            <summary>
            Выводит значение элементов матрицы в виде текста
            </summary>
            <param name="sep">Разделитель горизонтальный</param>
            <returns></returns>
        </member>
        <member name="M:AI.Matrix.GetColumns(AI.Matrix)">
            <summary>
            Разложение матрицы на столбцы
            </summary>
            <param name="matr">Матрица</param>
            <returns>Массив векторов</returns>
        </member>
        <member name="M:AI.Matrix.Round(System.Int32)">
            <summary>
            Округление значений
            </summary>
            <param name="n">До какого знака</param>
        </member>
        <member name="M:AI.Matrix.Save(System.String)">
            <summary>
            Сохранение матрицы
            </summary>
            <param name="path">Путь до файла</param>
        </member>
        <member name="M:AI.Matrix.AlternativMatrix(System.Func{System.Double,System.Double}[],AI.Vector)">
            <summary>
            Альтернативная матрица
            </summary>
            <param name="functions">Функции</param>
            <param name="values">Значения</param>
            <returns>Возвращает альтернативную матрицу</returns>
        </member>
        <member name="M:AI.Matrix.OrtogonalMatrix(System.Func{System.Int32,System.Double,System.Double},AI.Vector,System.Int32)">
            <summary>
            Ортогональная матрица
            </summary>
            <param name="functions">Порождающая функция</param>
            <param name="values">Значения</param>
            <param name="count">Число выходов</param>
            <returns>Возвращает ортогональную матрицу</returns>
        </member>
        <member name="M:AI.Matrix.Determinant">
            <summary>
            Расчет определителя матрицы
            </summary>
            <returns>Определитель</returns>
        </member>
        <member name="M:AI.Matrix.ToTriangularMatr">
            <summary>
            Переводит произвольную матрицу в треугольную
            </summary>
            <returns>Диагональная матрица</returns>
        </member>
        <member name="M:AI.Matrix.GetVector(System.Int32,System.Int32)">
            <summary>
            Возвращает вектор с нужного среза, нужный индекс
            </summary>
            <param name="index">Индекс</param>
            <param name="dimension">Срез/размерность</param>
            <returns>Вектор</returns>
        </member>
        <member name="M:AI.Matrix.Swap(System.Int32,System.Int32,System.Int32)">
            <summary>
            Заменяет строки/столбцы
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <param name="dimension"></param>
        </member>
        <member name="M:AI.Matrix.MatrixShow">
            <summary>
            Вывод значений матрицы в таблицу(отдельную форму)
            </summary>
        </member>
        <member name="M:AI.Matrix.CorrelationMatrixNorm(AI.Vector[])">
            <summary>
            Метод создает матрицу с коэффициентами попарной корреляции векторов
            </summary>
            <param name="vectors">Вектора</param>
            <returns>Корреляционная матрица</returns>
        </member>
        <member name="M:AI.Matrix.Open(System.String)">
            <summary>
            Загрузка матрицы
            </summary>
            <param name="path">Путь до файла</param>		
        </member>
        <member name="T:AI.ML.Classifiers.StructClass">
            <summary>
            Структура для хранения класса
            </summary>
        </member>
        <member name="F:AI.ML.Classifiers.StructClass._strName">
            <summary>
            Имя класса
            </summary>
        </member>
        <member name="F:AI.ML.Classifiers.StructClass._centGiperSfer">
            <summary>
            Центр гиперсферы
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.StructClass.NumCl">
            <summary>
            Имя класса
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.StructClass.CentGiperSfer">
            <summary>
            Центр гиперсферы
            </summary>
        </member>
        <member name="T:AI.ML.Classifiers.StructClasses">
            <summary>
            Структура классификатора
            </summary>
        </member>
        <member name="F:AI.ML.Classifiers.StructClasses._classes">
            <summary>
            Коллекция классов
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.StructClasses.Classes">
            <summary>
            Список классов
            </summary>
        </member>
        <member name="T:AI.ML.Classifiers.kNN">
            <summary>
            Классификатор (метод ближайшего соседа) простейший и довольно эффективный метод классификации
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.kNN.Classes">
            <summary>
            Массив классов
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.kNN.#ctor">
            <summary>
            Классификатор (Метод ближайшего соседа)
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.kNN.#ctor(System.String)">
            <summary>
            Классификатор (Метод ближайшего соседа)
            </summary>
            <param name="path">Путь до файла</param>
        </member>
        <member name="M:AI.ML.Classifiers.kNN.#ctor(AI.ML.Classifiers.StructClasses)">
            <summary>
            Классификатор (Метод ближайшего соседа)
            </summary>
            <param name="classifikator"> Коллекция классов</param>
        </member>
        <member name="M:AI.ML.Classifiers.kNN.GetCentr(AI.Vector[])">
            <summary>
            Поиск центра класса
            </summary>
            <param name="vectors">Точки класса</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Classifiers.kNN.Teach1(AI.Vector[],System.Int32)">
            <summary>
            Обучение одного элеменнта класса
            </summary>
            <param name="tDataset">Выборка</param>
            <param name="nameClass">Индекс класса</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Classifiers.kNN.AddClasses(AI.Vector[],System.Int32)">
            <summary>
            Обучение одного элеменнта класса
            </summary>
            <param name="tDataset">Выборка</param>
            <param name="numClass">индекс класса</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Classifiers.kNN.AddClass1(AI.Vector[],System.Int32)">
            <summary>
            Добавление класса в классификатор
            </summary>
            <param name="tDataset">Выборка</param>
            <param name="numClass">Номер класса</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Classifiers.kNN.AddClass(AI.Vector[],System.Int32)">
            <summary>
            Добавление класса в классификатор
            </summary>
            <param name="tDataset">Выборка</param>
            <param name="numClass">Имя класса</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Classifiers.kNN.Save(System.String)">
            <summary>
            Сохранение классификатора
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.Classifiers.kNN.Open(System.String)">
            <summary>
            Загрузка классификатора
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.Classifiers.kNN.Recognize(AI.Vector)">
            <summary>
            Распознавание
            </summary>
            <param name="inp">Вектор который надо распознать</param>
        </member>
        <member name="M:AI.ML.Classifiers.kNN.AddClass(AI.Vector,System.Int32)">
            <summary>
            Добавление класса
            </summary>
            <param name="tData">Центральный вектор</param>
            <param name="num">Индекс класса</param>
        </member>
        <member name="M:AI.ML.Classifiers.kNN.RecognizeVector(AI.Vector)">
            <summary>
            Возращает вектор, его длинна - число классов, на номере нужного класса стоит 1
            </summary>
            <param name="inp">Вектор входа</param>
            <returns></returns>
        </member>
        <member name="T:AI.ML.Classifiers.StructClassCorr">
            <summary>
            Структура для хранения класса
            </summary>
        </member>
        <member name="F:AI.ML.Classifiers.StructClassCorr._strName">
            <summary>
            Имя класса
            </summary>
        </member>
        <member name="F:AI.ML.Classifiers.StructClassCorr._centGiperSfer">
            <summary>
            Центр гиперсферы
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.StructClassCorr.Probability">
            <summary>
            Вероятность принадлежности
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.StructClassCorr.StrName">
            <summary>
            Индекс класса
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.StructClassCorr.CentGiperSfer">
            <summary>
            Центр гиперсферы
            </summary>
        </member>
        <member name="T:AI.ML.Classifiers.StructClassesCorr">
            <summary>
            Структура классификатора
            </summary>
        </member>
        <member name="F:AI.ML.Classifiers.StructClassesCorr._classes">
            <summary>
            Список классов
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.StructClassesCorr.Classes">
            <summary>
            Список классов
            </summary>
        </member>
        <member name="T:AI.ML.Classifiers.CorrelationClassifier">
            <summary>
            Классификатор
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.CorrelationClassifier.Classes">
            <summary>
            Классы
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.#ctor">
            <summary>
            Корреляционный классификатор
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.#ctor(System.String)">
            <summary>
            Классификатор
            </summary>
            <param name="path">Путь до файла</param>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.#ctor(AI.ML.Classifiers.StructClassesCorr)">
            <summary>
            Классификатор
            </summary>
            <param name="classifikator"> Коллекция классов</param>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.CorrelationMetric(AI.Vector,AI.Vector)">
            <summary>
            Корреляционная метрика
            </summary>
            <param name="A">Первый вектор</param>
            <param name="B">Второй вектор</param>
            <returns>Коэффициент корреляции нормированный [0;1]</returns>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.GetCentr(AI.Vector[])">
            <summary>
            Поиск центра класса
            </summary>
            <param name="vectors">Точки класса</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.Recognition(AI.Vector[])">
            <summary>
            Распознавание набора векторов
            </summary>
            <param name="vects">Вектора</param>
            <returns>Вектор меток</returns>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.Teach1(AI.Vector[],System.Int32)">
            <summary>
            Обучение одного элеменнта класса
            </summary>
            <param name="tDataset">Выборка</param>
            <param name="numClass">Имя класса</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.AddClasses(AI.Vector[],System.Int32)">
            <summary>
            Обучение одного элеменнта класса
            </summary>
            <param name="tDataset">Выборка</param>
            <param name="numClass">Имя класса</param>
            <returns></returns>
        </member>
        <!-- Проигнорирован некорректный комментарий XML для члена "M:AI.ML.Classifiers.CorrelationClassifier.AddClass1(AI.Vector[],System.Int32)" -->
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.AddClass(AI.Vector[],System.Int32)">
            <summary>
            Добавление класса в классификатор
            </summary>
            <param name="tDataset">Выборка</param>
            <param name="numClass">Имя класса</param>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.Save(System.String)">
            <summary>
            Сохранение классификатора
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.Open(System.String)">
            <summary>
            Загрузка классификатора
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.RecognizeVectorStruct(AI.Vector)">
            <summary>
            Распознавание
            </summary>
            <param name="inp">Вектор который надо распознать</param>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.AddClass(AI.Vector,System.Int32)">
            <summary>
            Добавление класса
            </summary>
            <param name="tData">Центральный вектор</param>
            <param name="num">Индекс класса</param>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.Recognize(AI.Vector)">
            <summary>
            Распознавание вектора
            </summary>
            <param name="inp">Вход</param>
            <returns>Индекс класса</returns>
        </member>
        <member name="M:AI.ML.Classifiers.CorrelationClassifier.RecognizeVector(AI.Vector)">
            <summary>
            Распознавание
            </summary>
            <param name="inp">Вектор который надо распознать</param>
        </member>
        <member name="T:AI.ML.Classifiers.IClassifier">
            <summary>
            Интерфейс для работы классификаторов
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.IClassifier.AddClass(AI.Vector[],System.Int32)">
            <summary>
            Добавление класса
            </summary>
            <param name="tDataset">Выборка</param>
            <param name="nameClass">Номер класса</param>
        </member>
        <member name="M:AI.ML.Classifiers.IClassifier.AddClass(AI.Vector,System.Int32)">
            <summary>
            Добавление класса
            </summary>
            <param name="data">"Вектор</param>
            <param name="nameClass">Номер класса</param>
        </member>
        <member name="M:AI.ML.Classifiers.IClassifier.Save(System.String)">
            <summary>
            Сохранение классификатора
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.Classifiers.IClassifier.Open(System.String)">
            <summary>
            Загрузка классификатора
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.Classifiers.IClassifier.Recognize(AI.Vector)">
            <summary>
            Распознавание
            </summary>
            <param name="inp">Вектор который надо распознать</param>
        </member>
        <member name="M:AI.ML.Classifiers.IClassifier.RecognizeVector(AI.Vector)">
            <summary>
            Распознавание
            </summary>
            <param name="inp">Вектор который надо распознать</param>
        </member>
        <member name="T:AI.ML.Classifiers.SModel">
            <summary>
            Модель класса
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.SModel.Probability">
            <summary>
            Вероятность
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.SModel.NumClass">
            <summary>
            Номер
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.SModel.Weights">
            <summary>
            Веса для каждого компонента
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.SModel.ProbabilityApriory">
            <summary>
            Априорная вероятность
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.SModel.#ctor">
            <summary>
            Задание модели по умолчанию
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.SModel.CalculateProb">
            <summary>
            Рассчет вероятностей с учетом весов
            </summary>
        </member>
        <member name="T:AI.ML.Classifiers.SModelComponent">
            <summary>
            Модель компоненты вектора
            </summary>
        </member>
        <member name="F:AI.ML.Classifiers.SModelComponent._e">
            <summary>
            Мат. ожидаине
            </summary>
        </member>
        <member name="F:AI.ML.Classifiers.SModelComponent._std">
            <summary>
            СКО
            </summary>
        </member>
        <member name="F:AI.ML.Classifiers.SModelComponent.pr">
            <summary>
            Вероятность
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.SModelComponent.#ctor">
            <summary>
            Стат. модель компонента модели
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.SModelComponent.#ctor(System.Double,System.Double)">
            <summary>
            Стат. модель компонента модели
            </summary>
            <param name="e">Мат. ожидание</param>
            <param name="std">Среднеквадратичное отклонение</param>
        </member>
        <member name="T:AI.ML.Classifiers.SimpleFLClassifier">
            <summary>
            Простой статистический классификатор, 
            который предполагает, что у величины 
            гауссовский з-н распределения
            </summary>
        </member>
        <member name="P:AI.ML.Classifiers.SimpleFLClassifier.Threshold">
            <summary>
            Порог
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.SimpleFLClassifier.#ctor">
            <summary>
            Простой статистический классификатор, 
            который предполагает, что у величины 
            гауссовский з-н распределения
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.SimpleFLClassifier.#ctor(System.String)">
            <summary>
            Простой статистический классификатор, 
            который предполагает, что у величины 
            гауссовский з-н распределения
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.Classifiers.SimpleFLClassifier.Output(AI.Vector)">
            <summary>
            Выход
            </summary>
            <param name="inp">Вектор входа</param>
            <returns>Максимально похожая модель</returns>
        </member>
        <member name="M:AI.ML.Classifiers.SimpleFLClassifier.AddModel(AI.Vector[],System.Int32)">
            <summary>
            Добавление модели
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.SimpleFLClassifier.GetWeights">
            <summary>
            Весовые коэффициенты
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.SimpleFLClassifier.GetProbability(System.Double[],AI.ML.Classifiers.SModel)">
            <summary>
            Вероятности принадлежности к классу
            </summary>
            <param name="vect"></param>
            <param name="sm"></param>
        </member>
        <member name="M:AI.ML.Classifiers.SimpleFLClassifier.Save(System.String)">
            <summary>
            Сохранение классификатора
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.Classifiers.SimpleFLClassifier.Open(System.String)">
            <summary>
            Загрузка классификатора
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.Classifiers.SimpleFLClassifier.AddClass(AI.Vector[],System.Int32)">
            <summary>
            Добавление класса\модели
            </summary>
        </member>
        <member name="M:AI.ML.Classifiers.SimpleFLClassifier.Recognize(AI.Vector)">
            <summary>
            Распознавание вектора
            </summary>
            <param name="inp">Вектор</param>
            <returns>Имя класса</returns>
        </member>
        <member name="T:AI.ML.Clasterisators.CorrForel">
            <summary>
            Кластеризатор - Форель с корреляционной метрикой
            </summary>
        </member>
        <member name="P:AI.ML.Clasterisators.CorrForel.Clasters">
            <summary>
            Кластеры
            </summary>
        </member>
        <member name="M:AI.ML.Clasterisators.CorrForel.#ctor(AI.Vector[])">
            <summary>
            Корреляционный форель
            </summary>
        </member>
        <member name="M:AI.ML.Clasterisators.CorrForel.#ctor(AI.Vector[],System.Int32)">
            <summary>
            Корреляционный форель
            </summary>
        </member>
        <member name="M:AI.ML.Clasterisators.CorrForel.GetGipersfer(System.Double,AI.Vector,AI.Vector[])">
            <summary>
            Проводит гиперсферу нужного радиуса из конкретной точки и на заданном множестве
            </summary>
            <param name="R">Радиус</param>
            <param name="m">Центр масс</param>
            <param name="mass">Множество точек</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Clasterisators.CorrForel.Max(AI.Vector[],AI.Vector)">
            <summary>
            Максимальная дистанция
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Clasterisators.CorrForel.AWithOutB(AI.Vector[],AI.Vector[])">
            <summary>
            Множество А\В
            </summary>
            <param name="A">Множество А</param>
            <param name="B">Множество В</param>
            <returns>А\B</returns>
        </member>
        <member name="M:AI.ML.Clasterisators.CorrForel.GetCentr(AI.Vector[])">
            <summary>
            Поиск центра класса
            </summary>
            <param name="vectors">Точки класса</param>
            <returns></returns>
        </member>
        <member name="T:AI.ML.Clasterisators.Claster">
            <summary>
            Структура кластера
            </summary>
        </member>
        <member name="P:AI.ML.Clasterisators.Claster.Dataset">
            <summary>
            Выборка
            </summary>
        </member>
        <member name="P:AI.ML.Clasterisators.Claster.Centr">
            <summary>
            Центр кластера
            </summary>
        </member>
        <member name="T:AI.ML.Clasterisators.Forel">
            <summary>
            Кластеризатор Форель
            </summary>
        </member>
        <member name="P:AI.ML.Clasterisators.Forel.Clasters">
            <summary>
            Массив кластеров
            </summary>
        </member>
        <member name="M:AI.ML.Clasterisators.Forel.#ctor(AI.Vector[])">
            <summary>
            Конструктор класса
            </summary>
        </member>
        <member name="M:AI.ML.Clasterisators.Forel.#ctor(AI.Vector[],System.Int32)">
            <summary>
            Конструктор класса
            </summary>
            <param name="dataset">Выборка</param>
            <param name="minR">Минимальный радиус</param>
        </member>
        <member name="M:AI.ML.Clasterisators.Forel.GetGipersfer(System.Double,AI.Vector,AI.Vector[])">
            <summary>
            Проводит гиперсферу нужного радиуса из конкретной точки и на заданном множестве
            </summary>
            <param name="R">Радиус</param>
            <param name="m">Центр масс</param>
            <param name="mass">Множество точек</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Clasterisators.Forel.Max(AI.Vector[],AI.Vector)">
            <summary>
            Максимальная дистанция
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Clasterisators.Forel.AWithOutB(AI.Vector[],AI.Vector[])">
            <summary>
            Множество А\В
            </summary>
            <param name="A">Множество А</param>
            <param name="B">Множество В</param>
            <returns>А\B</returns>
        </member>
        <member name="M:AI.ML.Clasterisators.Forel.GetCentr(AI.Vector[])">
            <summary>
            Поиск центра класса
            </summary>
            <param name="vectors">Точки класса</param>
            <returns></returns>
        </member>
        <member name="T:AI.ML.Distance">
            <summary>
            Расстояния
            </summary>
        </member>
        <member name="M:AI.ML.Distance.ManhattanDistance(AI.Vector,AI.Vector)">
            <summary>
            Матхэтенское расстояние (L1)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Distance.CorrDist(AI.Vector,AI.Vector)">
            <summary>
            Корреляционная метрика
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:AI.ML.Datasets.ExtensionOfFeatureSpace">
            <summary>
            Расширение пространства признаков
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.Polinomial(System.Double,System.Int32)">
            <summary>
            Раширение пространства признаков полиномиальной ф-ей
            </summary>
            <param name="x">Вход</param>
            <param name="n">степень полинома</param>
            <returns>Новый вектор</returns>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.Polinomial(AI.Vector,System.Int32)">
            <summary>
            Раширение пространства признаков полиномиальной ф-ей
            </summary>
            <param name="inp">Вход</param>
            <param name="n">степень полинома</param>
            <returns>Новый вектор</returns>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.Cos(System.Double,System.Int32)">
            <summary>
            Раширение пространства признаков косинусами
            </summary>
            <param name="x">Вход</param>
            <param name="n">Число гармоник</param>
            <returns>Новый вектор</returns>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.Sin(System.Double,System.Int32)">
            <summary>
            Раширение пространства признаков синусами 
            </summary>
            <param name="x">Вход</param>
            <param name="n">Число гармоник</param>
            <returns>Новый вектор</returns>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.SinCos(System.Double,System.Int32)">
            <summary>
            Раширение пространства признаков синусами и косинусами
            </summary>
            <param name="x">Вход</param>
            <param name="n">Число гармоник</param>
            <returns>Новый вектор</returns>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.Cos(AI.Vector,System.Int32)">
            <summary>
            Раширение пространства признаков косинусами
            </summary>
            <param name="inp">Вход</param>
            <param name="n">Число гармоник</param>
            <returns>Новый вектор</returns>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.PoliCos(AI.Vector,System.Int32,System.Int32)">
            <summary>
            Расширение пространства с помощью полиномиальных ф-й и потом косинусов
            </summary>
            <param name="x">Вход</param>
            <param name="nPolinom">Степень полинома</param>
            <param name="nCos">Кол-во косинусов</param>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.PoliCos(System.Double,System.Int32,System.Int32)">
            <summary>
            Расширение пространства с помощью полиномиальных ф-й и потом косинусов
            </summary>
            <param name="x">Вход</param>
            <param name="nPolinom">Степень полинома</param>
            <param name="nCos">Кол-во косинусов</param>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.GaussRBF(System.Double,AI.Vector,System.Double)">
            <summary>
            Радиально-базисная ф-я Гаусса
            </summary>
            <param name="x">Вход</param>
            <param name="centers">Массив центров</param>
            <param name="std">СКО</param>
            <returns>Вектор значений от 0 до 1</returns>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.Sinc(System.Double,AI.Vector)">
            <summary>
            Синус Котельникова sin(x)/x
            </summary>
            <param name="x"></param>
            <param name="centers"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Datasets.ExtensionOfFeatureSpace.ImportanceSign(AI.Vector[])">
            <summary>
            
            </summary>
            <param name="dataset"></param>
            <returns></returns>
        </member>
        <member name="T:AI.ML.Datasets.LatticeClass">
            <summary>
            Представляет структуру вектор-класс
            </summary>
        </member>
        <member name="P:AI.ML.Datasets.LatticeClass.InpLat">
            <summary>
            Вектор для классификации
            </summary>
        </member>
        <member name="P:AI.ML.Datasets.LatticeClass.ClassMark">
            <summary>
            Метка класса
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.LatticeClass.#ctor(AI.Vector,System.Int32)">
            <summary>
            Пример решетка/метка
            </summary>
            <param name="vector">Вектор</param>
            <param name="mark">Метка</param>
        </member>
        <member name="M:AI.ML.Datasets.LatticeClass.#ctor(AI.SparseData.Lattice1DDouble,System.Int32)">
            <summary>
            Пример решетка/метка
            </summary>
            <param name="lat">Одномерная решетка</param>
            <param name="mark">Метка</param>
        </member>
        <member name="T:AI.ML.Datasets.LatticeIntDataset">
            <summary>
            Датасет
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.LatticeIntDataset.#ctor(System.String)">
            <summary>
            Загрузка датасета из файла
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.Datasets.LatticeIntDataset.#ctor">
            <summary>
            Загрузка датасета из файла
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.LatticeIntDataset.GetRandomData">
            <summary>
            Случайный представитель датасета
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.LatticeIntDataset.GetRandomDataDel">
            <summary>
            Случайный представитель датасета
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.LatticeIntDataset.Save(System.String)">
            <summary>
            Сохранение датасета
            </summary>
            <param name="path">Путь до датасета</param>
        </member>
        <member name="M:AI.ML.Datasets.LatticeIntDataset.GetLat">
            <summary>
            Массив решеток
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.LatticeIntDataset.GetInts">
            <summary>
            Массив меток
            </summary>
        </member>
        <member name="T:AI.ML.Datasets.VectorClass">
            <summary>
            Представляет структуру вектор-класс
            </summary>
        </member>
        <member name="P:AI.ML.Datasets.VectorClass.InpVector">
            <summary>
            Вектор для классификации
            </summary>
        </member>
        <member name="P:AI.ML.Datasets.VectorClass.ClassMark">
            <summary>
            Метка класса
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.VectorClass.#ctor(AI.Vector,System.Int32)">
            <summary>
            Представляет структуру вектор-класс
            </summary>
            <param name="vector">Вектор</param>
            <param name="mark">Метка класса</param>
        </member>
        <member name="T:AI.ML.Datasets.VectorIntDataset">
            <summary>
            Датасет
            </summary>
        </member>
        <member name="F:AI.ML.Datasets.VectorIntDataset.mean">
            <summary>
            Средний вектор
            </summary>
        </member>
        <member name="F:AI.ML.Datasets.VectorIntDataset.disp">
            <summary>
            Дисперсия по выборке
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.#ctor(System.String)">
            <summary>
            Загрузка датасета из файла
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.#ctor">
            <summary>
            Датасет
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.GetRandomData">
            <summary>
            Случайный представитель датасета
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.Save(System.String)">
            <summary>
            Сохранение датасета
            </summary>
            <param name="path">Путь до датасета</param>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.DataVisual(System.Int32)">
            <summary>
            Данные для визуализации
            </summary>
            <param name="n">Число классов</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.CorrMatrFeatures">
            <summary>
            Корреляционная матрица признаков
            </summary>
            <returns>Нормированная кор. матрица</returns>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.DispMeanResult">
            <summary>
            Получение вектора дисперсии и среднего вектора
            </summary>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.Normalise">
            <summary>
            Нормализация датасета
            </summary>
            <returns>Датасет</returns>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.GetDatasetDelSim(System.Double)">
            <summary>
            Удаление похожих векторов из разных классов
            </summary>
            <param name="simCoef">Коэффициент схожести</param>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.CsvToVid(System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.Datasets.VectorIntDataset.CsvToVid(System.String,System.Int32,System.Char)">
            <summary>
            
            </summary>
        </member>
        <member name="T:AI.ML.GradientDecentDataset">
            <summary>
            Класс для хранения обучающей выборки для градиентного спуска
            </summary>
        </member>
        <member name="P:AI.ML.GradientDecentDataset.X">
            <summary>
            Набор векторов "Х"
            </summary>
        </member>
        <member name="P:AI.ML.GradientDecentDataset.Y">
            <summary>
            Набор векторов "Y"
            </summary>
        </member>
        <member name="M:AI.ML.GradientDecentDataset.#ctor">
            <summary>
            Создает экземпляр GradientDecentDataset
            </summary>
        </member>
        <member name="M:AI.ML.GradientDecentDataset.#ctor(System.Collections.Generic.List{AI.Vector},System.Collections.Generic.List{AI.Vector})">
            <summary>
            Создает экземпляр GradientDecentDataset
            </summary>
            <param name="xVector">Набор векторов "Х"</param>
            <param name="yVector">Набор векторов "Y"</param>
        </member>
        <member name="M:AI.ML.GradientDecentDataset.Add(AI.Vector,AI.Vector)">
            <summary>
            Добавляет данные в обучающую выборку
            </summary>
            <param name="x">Вектор х</param>
            <param name="y">Вектор у</param>
        </member>
        <member name="M:AI.ML.GradientDecentDataset.Add(System.Double,System.Double)">
            <summary>
            Добавляет данные в обучающую выборку
            </summary>
            <param name="x">переменная х</param>
            <param name="y">переменная у</param>
        </member>
        <member name="M:AI.ML.GradientDecentDataset.Add(AI.Vector,System.Double)">
            <summary>
            Добавляет данные в обучающую выборку
            </summary>
            <param name="x">Вектор х</param>
            <param name="y">Переменная у</param>
        </member>
        <member name="M:AI.ML.GradientDecentDataset.Clear">
            <summary>
            Очистка данных
            </summary>
        </member>
        <member name="T:AI.ML.GradientDecent">
            <summary>
            Градиентный спуск
            </summary>
        </member>
        <member name="P:AI.ML.GradientDecent.Step">
            <summary>
            Шаг для вычисления частных производных и градиента
            (чем он меньше, тем точнее вычисление частных производных)
            по умолчанию шаг 1e-7
            </summary>
        </member>
        <member name="P:AI.ML.GradientDecent.GdDataset">
            <summary>
            Обучающая выборка
            </summary>
        </member>
        <member name="P:AI.ML.GradientDecent.Parammetrs">
            <summary>
            Вектор оптимизируемых парамметров
            </summary>
        </member>
        <member name="P:AI.ML.GradientDecent.Function">
            <summary>
            Целевая функция типа:
            double SF(Vector_парамметры, ListVector_обучающая_выборка_Х, ListVector_обучающая_выборка_Y)
            </summary>
        </member>
        <member name="P:AI.ML.GradientDecent.Norm">
            <summary>
            Норма обучения, по умолчанию 0.002
            </summary>
        </member>
        <member name="P:AI.ML.GradientDecent.Itterations">
            <summary>
            Кол-во иттераций, по умолчанию 30
            </summary>
        </member>
        <member name="M:AI.ML.GradientDecent.#ctor(AI.Vector,System.Func{AI.Vector,System.Collections.Generic.List{AI.Vector},System.Collections.Generic.List{AI.Vector},System.Double},AI.ML.GradientDecentDataset)">
            <summary>
            Создание объекта Градиентный спуск
            </summary>
            <param name="param">Вектор оптимизируемых парамметров</param>
            <param name="function">Целевая функция типа:
            double SF(Vector_парамметры, ListVector_обучающая_выборка_Х, ListVector_обучающая_выборка_Y)</param>
            <param name="gdd">Обучающая выборка</param>
        </member>
        <member name="M:AI.ML.GradientDecent.DecentIter">
            <summary>
            Одна иттерация спуска
            </summary>
        </member>
        <member name="M:AI.ML.GradientDecent.Decent">
            <summary>
            Синхронное выполнение градиентного спуска
            </summary>
        </member>
        <member name="M:AI.ML.GradientDecent.AsyncDecent">
            <summary>
            Асинхронное выполнение градиентного спуска
            </summary>
        </member>
        <member name="M:AI.ML.GradientDecent.PartialDerivatives(AI.Vector,System.Collections.Generic.List{AI.Vector},System.Collections.Generic.List{AI.Vector},System.Func{AI.Vector,System.Collections.Generic.List{AI.Vector},System.Collections.Generic.List{AI.Vector},System.Double})">
            <summary>
            Частные производные
            </summary>
            <param name="param">Начальный вектор параметров(точка)</param>
            <param name="function">Целевая функция(принимает вектор параметров, выдает результирующее значение)</param>
             <param name="inp"> Вектора входа</param>
              <param name="ideal"> Идеальные выходы</param>
            <returns>Возвращает вектор частных производных</returns>
        </member>
        <member name="T:AI.ML.LinearAutocoder">
            <summary>
            Линейный автокодировщик
            </summary>
        </member>
        <member name="P:AI.ML.LinearAutocoder.Coder">
            <summary>
            Матрица отображения пространств
            </summary>
        </member>
        <member name="M:AI.ML.LinearAutocoder.#ctor(System.Int32,System.Int32)">
            <summary>
            Линейный автокодировщик
            </summary>
            <param name="inputs">Размерность исходного пространства</param>
            <param name="outps">Размерность нового пространства</param>
        </member>
        <member name="M:AI.ML.LinearAutocoder.Train(AI.Vector)">
            <summary>
            Обучение
            </summary>
            <param name="input">Вектор входа/выхода</param>
            <returns>Ошибка MSE</returns>
        </member>
        <member name="M:AI.ML.LinearAutocoder.Output(AI.Vector)">
            <summary>
            Выход
            </summary>
            <param name="input">Вход</param>
        </member>
        <member name="M:AI.ML.LinearAutocoder.Reconstruct(AI.Vector)">
            <summary>
            Восстановление вектора
            </summary>
            <param name="vect"></param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.LinearAutocoder.GenerateCoderMatrix">
            <summary>
            Генерация матрицы(нормированной)
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.MenegerNNW">
            <summary>
            Description of MenegerNNW.
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.MenegerNNW._net">
            <summary>
            Нейросеть
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.MenegerNNW.#ctor(AI.ML.NeuralNetwork.Net,AI.ML.Datasets.VectorIntDataset)">
            <summary>
            Нейросетевой менеджер
            </summary>
            <param name="net">Нейросеть</param>
            <param name="vid">Датасет</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.MenegerNNW.GetNet(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Создание нейронной сети
            </summary>
            <param name="inpDim">Количество входов</param>
            <param name="classCount">Количествой классов</param>
            <param name="hDim">Кол-во нейронов на скрытом слое</param>
            <param name="learningRate">Скорость обучения</param>
            <returns>Нейросеть</returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.MenegerNNW.GetNet(System.Int32,System.Int32,System.Int32)">
            <summary>
            Создание нейронной сети
            </summary>
            <param name="inpDim">Количество входов</param>
            <param name="classCount">Количествой классов</param>
            <param name="hDim">Кол-во нейронов на скрытом слое</param>
            <returns>Нейросеть</returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.MenegerNNW.Train(System.Int32)">
            <summary>
            Обучение
            </summary>
            <param name="epoch">количество эпох</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.MenegerNNW.Test(AI.ML.Datasets.VectorIntDataset)">
            <summary>
            Тестирование
            </summary>
            <param name="vidTest">Датасет</param>
            <returns>Вероятность верного ответа</returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.MenegerNNW.TestStr(AI.ML.Datasets.VectorIntDataset,System.Int32)">
            <summary>
            Тестирование
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.MenegerNNW.Output(AI.Vector)">
            <summary>
            Выход сети
            </summary>
            <param name="inp">Вход</param>
            <returns>Метка класса</returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.MenegerNNW.GetClass(AI.Vector)">
            <summary>
            Получение метки класса в результате работы нейронки
            </summary>
            <param name="sig">Сигнал</param>
            <returns>Метка класса</returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.Net">
            <summary>
            Нейронная сеть
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.Net._layers">
            <summary>
            Список слоев НС
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.Net.LerningRate">
            <summary>
            Скорость обучения (исправить)
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.Net.Moment">
            <summary>
            Инерционность обучения
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.Net.#ctor">
            <summary>
            Создание сети
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.Net.#ctor(System.Random)">
            <summary>
            Создание сети
            </summary>
            <param name="rnd">Датчик случ. чисел</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.Net.#ctor(System.String)">
            <summary>
            Создание сети
            </summary>
            <param name="path">Путь до сохраненной НС</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.Net.Add(AI.ML.NeuralNetwork.ILayer)">
            <summary>
            Добавление слоя
            </summary>
            <param name="layer">Слой</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.Net.Output(AI.Vector)">
            <summary>
            Выход сети
            </summary>
            <param name="input">Вход</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.Net.OutputClass(AI.Vector)">
            <summary>
            Выход сети (Класс)
            </summary>
            <param name="input">Вход</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.Net.TrainClassifier(AI.Vector,System.Int32)">
            <summary>
            Обучение классификатора
            </summary>
            <param name="inp">Вектор входа</param>
            <param name="outp">Метка класса</param>
            <returns>Ошибка на примере</returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.Net.Train(AI.Vector,AI.Vector)">
            <summary>
            Обучение сети
            </summary>
            <param name="inp">Вектор входа</param>
            <param name="output">Вектор выхода</param>
            <returns>Ошибка на примере</returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.Net.Save(System.String)">
            <summary>
            Сохранение нейронной сети
            </summary>
            <param name="path">Путь до файла</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.Net.Open(System.String)">
            <summary>
            Загрузка матрицы
            </summary>
            <param name="path">Путь до файла</param>		
        </member>
        <member name="T:AI.ML.NeuralNetwork.FullBipolyareSigmoid">
            <summary>
            Гиперболический тангенс
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.FullBipolyareSigmoid.#ctor(System.Int32,System.Int32)">
            <summary>
            Гиперболический тангенс
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.FullBipolyareSigmoid.#ctor(System.Int32)">
            <summary>
            Гиперболический тангенс
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.FullBipolyareSigmoid.FActivation(AI.Vector)">
            <summary>
            Ф-я активации
            </summary>
            <param name="inp">Вход</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.FullBipolyareSigmoid.DfDy">
            <summary>
            Производная ф-ии активации
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CapsuleLinearLayer">
            <summary>
            Description of CasuleLayer.
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CapsuleLinearLayer._capsules">
            <summary>
            Массив капсул
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.CapsuleLinearLayer.norms">
            <summary>
            Массив норм, для каждой капсулы своя
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CapsuleLinearLayer.#ctor(AI.ML.NeuralNetwork.Capsule[])">
            <summary>
            Капсульный линейный слой
            </summary>
            <param name="capsules">Капсулы</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CapsuleLinearLayer.#ctor">
            <summary>
            Капсульный линейный слой
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CapsuleLinearLayer.Init(AI.ML.NeuralNetwork.Capsule[])">
            <summary>
            Инициализация
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CapsuleLinearLayer.Train">
            <summary>
            Обучение
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.Capsule">
            <summary>
            Капсула
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.Capsule.inputStartInterval">
            <summary>
            Начало интервал
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.Capsule.inputEndInterval">
            <summary>
            Окончание интервала 
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.Capsule.neuronCount">
            <summary>
            Число нейронов в капсуле
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.Capsule.norm">
            <summary>
            Скорость обучения
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.Capsule.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Капсула 
            </summary>
            <param name="isi">Индекс начала</param>
            <param name="iei">Индекс окончание</param>
            <param name="nc">Количество нейронов в капсуле</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.Capsule.GetNorms(AI.ML.NeuralNetwork.Capsule[])">
            <summary>
            Нормы обучения
            </summary>
            <param name="capsules">Капсулы</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.Capsule.GenerateMatrixW(AI.ML.NeuralNetwork.Capsule[])">
            <summary>
            Генерарация весов по капсулам
            </summary>
            <param name="capsules"></param>
            <returns></returns>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CapsuleRelu">
            <summary>
            Description of CapsulePRelu.
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CapsuleRelu.#ctor(AI.ML.NeuralNetwork.Capsule[])">
            <summary>
            Капсульный релу слой
            </summary>
            <param name="caps"></param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CapsuleRelu.FActivation(AI.Vector)">
            <summary>
            Ф-я активации
            </summary>
            <param name="inp">Вход</param>
            <returns></returns>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CapsuleRelu.DfDy">
            <summary>
            Производная ф-ии активации
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.CapsuleSig">
            <summary>
            Сигмоидальный капсульный слой
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CapsuleSig.#ctor(AI.ML.NeuralNetwork.Capsule[])">
            <summary>
            Капсульный сигмоидальный слой
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CapsuleSig.FActivation(AI.Vector)">
            <summary>
            Ф-я активации
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.CapsuleSig.DfDy">
            <summary>
            Производная ф-ии акт
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.FullConLayerBase">
            <summary>
            Полносвязный слой
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.FullConLayerBase.SizeOut">
            <summary>
            Размерность выхода
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.FullConLayerBase.W">
            <summary>
            Матрица весов
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.FullConLayerBase.Inp">
            <summary>
            Вектор входа
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.FullConLayerBase.Delts">
            <summary>
            Дельты
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.FullConLayerBase.OutputLayer">
            <summary>
            Выход слоя
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.FullConLayerBase.norm">
            <summary>
            Скорость обучения
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.FullConLayerBase.Eps">
            <summary>
            Ошибка
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.FullConLayerBase.moment">
            <summary>
            Момент
            </summary>
        </member>
        <member name="F:AI.ML.NeuralNetwork.FullConLayerBase.Last">
            <summary>
            Матрица весов на прошлой иттерации обучения
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.FullConLayerBase.#ctor">
            <summary>
            Полносвязный слой
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.FullConLayerBase.#ctor(System.Int32,System.Int32)">
            <summary>
            Полносвязный слой
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.FullConLayerBase.SetParam(System.Int32,System.Int32)">
            <summary>
            Установка параметров
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.FullConLayerBase.Output(AI.Vector)">
            <summary>
            Прямой проход сети
            </summary>
            <param name="input">Вход</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.FullConLayerBase.Backwards">
            <summary>
            Обратный проход сети
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.FullConLayerBase.FActivation(AI.Vector)">
            <summary>
            Ф-я активации
            </summary>
            <param name="inp">Вход</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.FullConLayerBase.DfDy">
            <summary>
            Производная ф-ии активации
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.FullConLayerBase.DeltH(AI.ML.NeuralNetwork.ILayer)">
            <summary>
            Ошибка на скрытом слое
            </summary>
            <param name="layer">Следующий слой</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.FullConLayerBase.Train">
            <summary>
            Обучение НС
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.FullConLayerBase.WGenerate(System.Random)">
            <summary>
            Перегенерирование весов
            </summary>
            <param name="rnd">Случайные числа</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.FullConLayerBase.Delt(AI.Vector)">
            <summary>
            Расчет дельт
            </summary>
            <param name="ideal">Идеальный выход</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.ILayer">
            <summary>
            Слой нейронной сети
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.ILayer.SizeOut">
            <summary>
            Размерность выхода
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.ILayer.Eps">
            <summary>
            Ошибка
            </summary>
        </member>
        <member name="P:AI.ML.NeuralNetwork.ILayer.Delts">
            <summary>
            Дельты
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.ILayer.Output(AI.Vector)">
            <summary>
            Прямой проход сети
            </summary>
            <param name="input">Вход</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.ILayer.Delt(AI.Vector)">
            <summary>
            Ошибка на выходе
            </summary>
            <param name="ideal">Идеальный вектор</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.ILayer.DeltH(AI.ML.NeuralNetwork.ILayer)">
            <summary>
            Ошибка на скрытом слое
            </summary>
            <param name="layer">Следующий слой</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.ILayer.Backwards">
            <summary>
             Обратный проход
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.ILayer.Train">
            <summary>
            Обучение НС
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.ILayer.WGenerate(System.Random)">
            <summary>
            Перегенерация для повторяемости результатов
            </summary>
            <param name="rnd">ГСПЧ</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.ILayer.SetParam(System.Int32,System.Int32)">
            <summary>
            Установка(расчет) параметров НС
            </summary>
            <param name="inp">Размерность входа слоя</param>
            <param name="outp">Число нейронов(размерность выхода)</param>
        </member>
        <member name="T:AI.ML.NeuralNetwork.LinearLayer">
            <summary>
            Линейный слой
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.LinearLayer.#ctor(System.Int32)">
            <summary>
            Линейный слой
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.LinearLayer.#ctor(System.Int32,System.Int32)">
            <summary>
            Линейный слой
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.Sigmoid">
            <summary>
            Description of Sigmoid.
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.Sigmoid.#ctor(System.Int32,System.Int32)">
            <summary>
            Слой с исгмоидальной активацией
            </summary>
            <param name="inp">Кол-во входов</param>
            <param name="outp">Кол-во выходов(нейронов)</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.Sigmoid.#ctor(System.Int32)">
            <summary>
            Слой с исгмоидальной активацией
            </summary>
            <param name="neuronCount">Кол-во нейронов</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.Sigmoid.FActivation(AI.Vector)">
            <summary>
            Функция активации
            </summary>
            <param name="inp">Выход линейного слоя</param>
        </member>
        <member name="M:AI.ML.NeuralNetwork.Sigmoid.DfDy">
            <summary>
            Производная функции активации
            </summary>
        </member>
        <member name="T:AI.ML.NeuralNetwork.Softmax">
            <summary>
            Description of Sofmax.
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.Softmax.#ctor(System.Int32,System.Int32)">
            <summary>
            Софтмакс
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.Softmax.#ctor(System.Int32)">
            <summary>
            Софтмакс
            </summary>
        </member>
        <member name="M:AI.ML.NeuralNetwork.Softmax.FActivation(AI.Vector)">
            <summary>
            Ф-я активации
            </summary>
        </member>
        <member name="T:AI.ML.Regression.ExpMean">
            <summary>
            Description of ExpMean.
            </summary>
        </member>
        <member name="M:AI.ML.Regression.ExpMean.#ctor(AI.Vector,System.Double)">
            <summary>
            Прогнозирование на основе скользящего среднего
            </summary>
            <param name="inp">Вход</param>
            <param name="oldPart">Старая часть(коэф. сглаживания)</param>
        </member>
        <member name="M:AI.ML.Regression.ExpMean.Predict(System.Double)">
            <summary>
            Прогноз
            </summary>
        </member>
        <member name="M:AI.ML.Regression.ExpMean.Predict(System.Int32)">
            <summary>
            Прогноз
            </summary>
        </member>
        <member name="T:AI.ML.Regression.LinearRegressionModel">
            <summary>
            Модель для линейной регрессии хранит k и b   
            f(x) = k*x+b;
            </summary>
        </member>
        <member name="P:AI.ML.Regression.LinearRegressionModel.k">
            <summary>
            Тангенс угла наклона
            </summary>
        </member>
        <member name="P:AI.ML.Regression.LinearRegressionModel.b">
            <summary>
            Смещение относительно (0;0)
            </summary>
        </member>
        <member name="T:AI.ML.Regression.LinearRegression">
            <summary>
            Линейная регрессия
            </summary>
        </member>
        <member name="P:AI.ML.Regression.LinearRegression.Lrm">
            <summary>
            Парамметры линейной регрессии
            </summary>
        </member>
        <member name="M:AI.ML.Regression.LinearRegression.#ctor(AI.Vector,AI.Vector)">
            <summary>
            Обучающая выборка
            </summary>
            <param name="X">Вектор X(независимая переменная)</param>
            <param name="Y">Вектор Y(зависимая переменная)</param>
        </member>
        <member name="M:AI.ML.Regression.LinearRegression.ToString">
            <summary>
            Вывод в строку
            </summary>
            <returns>Строка типа: f(x) = k*x+(b)</returns>
        </member>
        <member name="M:AI.ML.Regression.LinearRegression.Predict(System.Double)">
            <summary>
            Прогнозирование с помощью линейной модели
            </summary>
            <param name="x">Независимая переменная</param>
            <returns>Зависимая переменная</returns>
        </member>
        <member name="M:AI.ML.Regression.LinearRegression.Predict(AI.Vector)">
            <summary>
            Прогнозирование с помощью линейной модели
            </summary>
            <param name="X">Вектор независимых переменных</param>
            <returns>Вектор зависимых переменных</returns>
        </member>
        <member name="T:AI.ML.Regression.MultipleRegression">
            <summary>
            Множественная регрессия
            </summary>
        </member>
        <member name="P:AI.ML.Regression.MultipleRegression.Parammetrs">
            <summary>
            Параметры модели
            </summary>
        </member>
        <member name="M:AI.ML.Regression.MultipleRegression.#ctor(AI.Vector[],AI.Vector,System.Boolean)">
            <summary>
            Множественная линейная регрессия
            </summary>
            <param name="X">Вектора входа</param>
            <param name="Y">Выходы</param>
            <param name="isScale">Стоит ли применить масштабирование к данным</param>
        </member>
        <member name="M:AI.ML.Regression.MultipleRegression.#ctor(System.String)">
            <summary>
            Множественная линейная регрессия
            </summary>
            <param name="path">Путь до модели</param>
        </member>
        <member name="M:AI.ML.Regression.MultipleRegression.Predict(AI.Vector)">
            <summary>
            Прогноз
            </summary>
            <param name="vect">Вектор входа</param>
            <returns>Выход</returns>
        </member>
        <member name="M:AI.ML.Regression.MultipleRegression.Predict(AI.Vector[])">
            <summary>
            Прогноз
            </summary>
            <param name="inp">Вектора входа</param>
            <returns>Вектор выхода</returns>
        </member>
        <member name="M:AI.ML.Regression.MultipleRegression.SaveModel(System.String)">
            <summary>
            Сохранение модели
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.ML.Regression.MultipleRegression.LoadModel(System.String)">
            <summary>
            Загрузка модели
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="T:AI.ML.Regression.PolynomialRegression">
            <summary>
            Description of PolynomialRegression.
            </summary>
        </member>
        <member name="M:AI.ML.Regression.PolynomialRegression.#ctor(AI.Vector,AI.Vector,System.Int32)">
            <summary>
            Полиномиальная регрессия
            </summary>
        </member>
        <member name="M:AI.ML.Regression.PolynomialRegression.Predict(System.Double)">
            <summary>
            Прогноз
            </summary>
            <param name="inp">Значение незав. переменной</param>
        </member>
        <member name="M:AI.ML.Regression.PolynomialRegression.Predict(AI.Vector)">
            <summary>
            Прогноз
            </summary>
            <param name="vect">Значения незав. переменных</param>
        </member>
        <member name="T:AI.ML.Regression.RBFGauss">
            <summary>
            Description of RegressionLagrang.
            </summary>
        </member>
        <member name="F:AI.ML.Regression.RBFGauss.param">
            <summary>
            Параметры
            </summary>
        </member>
        <member name="M:AI.ML.Regression.RBFGauss.#ctor(AI.Vector,AI.Vector,System.Int32)">
            <summary>
            Регрессия
            </summary>
            <param name="X">Вектор входа</param>
            <param name="Y">Вектор выхода</param>
            <param name="nRBF">Кол-во ядер</param>
        </member>
        <member name="M:AI.ML.Regression.RBFGauss.Predict(System.Double)">
            <summary>
            Прогноз
            </summary>
            <param name="inp">Значение незав. переменной</param>
        </member>
        <member name="M:AI.ML.Regression.RBFGauss.Predict(AI.Vector)">
            <summary>
            Прогноз
            </summary>
            <param name="vect">Значения незав. переменных</param>
        </member>
        <member name="T:AI.ML.Regression.RegressionPoly">
            <summary>
            Description of RegressionLagrang.
            </summary>
        </member>
        <member name="M:AI.ML.Regression.RegressionPoly.#ctor(AI.Vector,AI.Vector,System.Int32)">
            <summary>
            Полиномиальная регрессия
            </summary>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="nPoly"></param>
        </member>
        <member name="M:AI.ML.Regression.RegressionPoly.Predict(System.Double)">
            <summary>
            Прогноз
            </summary>
            <param name="inp">вход</param>
            <returns>выход</returns>
        </member>
        <member name="M:AI.ML.Regression.RegressionPoly.Predict(AI.Vector)">
            <summary>
            Прогноз
            </summary>
            <param name="vect">Вектор входа</param>
            <returns>Вектор выхода</returns>
        </member>
        <member name="T:AI.HMM.HiMaMoWords">
            <summary>
            Скрытая марковская модель
            </summary>
        </member>
        <member name="F:AI.HMM.HiMaMoWords.stateMatrix">
            <summary>
            Матрица состояний
            </summary>
        </member>
        <member name="F:AI.HMM.HiMaMoWords.stateAlter">
            <summary>
            Матрица состояний
            </summary>
        </member>
        <member name="M:AI.HMM.HiMaMoWords.#ctor">
            <summary>
            Скрытая марковская модель
            </summary>
        </member>
        <member name="M:AI.HMM.HiMaMoWords.Train(System.String)">
            <summary>
            Обучение
            </summary>
            <param name="TrainText">Тренировочный текст</param>
        </member>
        <member name="M:AI.HMM.HiMaMoWords.GetMax(System.Double[0:,0:])">
            <summary>
            Максимальное значение в матрице
            </summary>
            <param name="matrix">Матрица</param>
            <returns>Максимальное значение</returns>
        </member>
        <member name="M:AI.HMM.HiMaMoWords.Generate(System.Int32,System.String)">
            <summary>
            Генерация текста
            </summary>
            <param name="num">Сколько слов</param>
            <param name="begin">Первое слово</param>
            <returns>Сгенерированный текст</returns>
        </member>
        <member name="M:AI.HMM.HiMaMoWords.GetInd(System.String)">
            <summary>
            Поиск индекса
            </summary>
            <param name="stateName">Имя состояния</param>
            <returns></returns>
        </member>
        <member name="M:AI.HMM.HiMaMoWords.GetWords(System.String[])">
            <summary>
             Получение слов
            </summary>
            <param name="strs">Строки входа</param>
            <returns></returns>
        </member>
        <member name="T:AI.NLP.BoWModel">
            <summary>
            Bag-of-Words модель
            </summary>
        </member>
        <member name="F:AI.NLP.BoWModel.vector">
            <summary>
            Вектор, в котором все 0 кроме позиции слова
            </summary>
        </member>
        <member name="P:AI.NLP.BoWModel.isStop">
            <summary>
            Анализируются ли стоп слова
            </summary>
        </member>
        <member name="P:AI.NLP.BoWModel.isDig">
            <summary>
            Пропускаются ли числа
            </summary>
        </member>
        <member name="F:AI.NLP.BoWModel.Len">
            <summary>
            Длинна вектора/словаря
            </summary>
        </member>
        <member name="P:AI.NLP.BoWModel.IsNormalise">
            <summary>
            Происходит ли нормализация вектора
            </summary>
        </member>
        <member name="M:AI.NLP.BoWModel.#ctor(System.String)">
            <summary>
            Bag-of-Words модель
            </summary>
        </member>
        <member name="M:AI.NLP.BoWModel.GetVector(System.String)">
            <summary>
            Получение вектора из текста
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AI.NLP.BoWModel.ModelGen(System.String,System.String,System.Boolean)">
            <summary>
            Генерация модели
            </summary>
        </member>
        <member name="T:AI.NLP.ProbabilityDictionaryData">
            <summary>
            Данные вероятностного словаря
            </summary>
        </member>
        <member name="T:AI.NLP.ProbabilityDictionary">
            <summary>
            Вероятностный словарь
            </summary>
        </member>
        <member name="P:AI.NLP.ProbabilityDictionary.StopWords">
            <summary>
            Слова не несущие смысла при стат. анализе
            </summary>
        </member>
        <member name="M:AI.NLP.ProbabilityDictionary.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Вероятностный словарь
            </summary>
            <param name="isStopDel">Удалять ли стоп-слова</param>
            <param name="isDigitDel">Удалять ли числа</param>
            <param name="isStem">Делать ли стеммеризацию</param>
        </member>
        <member name="M:AI.NLP.ProbabilityDictionary.Run(System.String)">
            <summary>
            Данные вероятностного словаря
            </summary>
            <param name="text">Тукст</param>
            <returns></returns>
        </member>
        <member name="M:AI.NLP.ProbabilityDictionary.DigialPredickat(System.String)">
            <summary>
            Возвращает true если в сторке есть цифры
            </summary>
            <param name="str">Строка</param>
        </member>
        <member name="M:AI.NLP.ProbabilityDictionary.Analis">
            <summary>
            Анализ текста
            </summary>
        </member>
        <member name="M:AI.NLP.ProbabilityDictionary.ToString(System.Int32)">
            <summary>
            Переводит частотный словарь в строку
            </summary>
            <param name="index">До какого индекса</param>
            <returns></returns>
        </member>
        <member name="T:AI.NLP.HMMFast">
            <summary>
            Быстрые марковские цепи
            </summary>
        </member>
        <member name="F:AI.NLP.HMMFast.nGram">
            <summary>
            Глубина моделирования
            </summary>
        </member>
        <member name="P:AI.NLP.HMMFast.ProbVector">
            <summary>
            Вектор вероятностей
            </summary>
        </member>
        <member name="P:AI.NLP.HMMFast.ProbVectorInvers">
            <summary>
            1- вектор вероятностей, полезен для установки квантелей
            </summary>
        </member>
        <member name="M:AI.NLP.HMMFast.#ctor">
            <summary>
            Быстрые марковские цепи
            </summary>
        </member>
        <member name="M:AI.NLP.HMMFast.#ctor(System.String)">
            <summary>
            Быстрые марковские цепи
            </summary>
        </member>
        <member name="M:AI.NLP.HMMFast.Train(System.String)">
            <summary>
            Обучение языковой модели
            </summary>
            <param name="TrainText">Тренировочный текст</param>
        </member>
        <member name="M:AI.NLP.HMMFast.ComprateStrArray(System.String[],System.String[])">
            <summary>
            Сравнение массивов строк
            </summary>
            <param name="arr1"></param>
            <param name="arr2"></param>
            <returns></returns>
        </member>
        <member name="M:AI.NLP.HMMFast.Generate(System.Int32,System.String[])">
            <summary>
            Генерация текста
            </summary>
            <param name="num">число слов</param>
            <param name="strs">начальное состояние</param>
            <returns>сгенерированная строка</returns>
        </member>
        <member name="M:AI.NLP.HMMFast.TextToVector(System.String)">
            <summary>
            Преобразование текста в вектор + изменение модели
            </summary>
            <param name="text">текст</param>
            <returns>вектор</returns>
        </member>
        <member name="M:AI.NLP.HMMFast.Save(System.String)">
            <summary>
            Сохранение модели
            </summary>
            <param name="path">путь до файла</param>
        </member>
        <member name="M:AI.NLP.HMMFast.Open(System.String)">
            <summary>
            Загрузка матрицы
            </summary>
            <param name="path">Путь до файла</param>		
        </member>
        <member name="T:AI.NLP.SemanticDictionary">
            <summary>
            Семантический соварь
            </summary>
            
        </member>
        <member name="M:AI.NLP.SemanticDictionary.#ctor(System.String)">
            <summary>
            Семантический словарь
            </summary>
            <param name="path">Путь до словаря</param>
        </member>
        <member name="M:AI.NLP.SemanticDictionary.WordToVector(System.String)">
            <summary>
            Преобразование текста в вектор
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:AI.NLP.SemanticDictionary.Sim(System.String,System.String)">
            <summary>
            Схожесть двух слов
            </summary>
            <param name="word1"></param>
            <param name="word2"></param>
            <returns></returns>
        </member>
        <member name="M:AI.NLP.SemanticDictionary.CompressData(System.String,System.String)">
            <summary>
            Загрузка данных из W2V
            </summary>
        </member>
        <member name="M:AI.NLP.SemanticDictionary.Save(System.String)">
            <summary>
            Сохранение
            </summary>
            <param name="path">Путь до файла</param>
        </member>
        <member name="M:AI.NLP.SemanticDictionary.Open(System.String)">
            <summary>
            Загрузка
            </summary>
            <param name="path">Путь до файла</param>		
        </member>
        <member name="T:AI.NLP.Stemmers.StemmerRus">
            <summary>
            Стемер русского языка
            </summary>
        </member>
        <member name="M:AI.NLP.Stemmers.StemmerRus.TransformingWord(System.String)">
            <summary>
            стемминг
            </summary>
            <param name="word">слово</param>
            <returns>приставка+корень</returns>
        </member>
        <member name="T:AI.NLP.TextAnalise">
            <summary>
            Анализ текста(Семантика)
            </summary>
        </member>
        <member name="M:AI.NLP.TextAnalise.#ctor">
            <summary>
            Анализ текста
            </summary>
        </member>
        <member name="M:AI.NLP.TextAnalise.#ctor(System.String)">
            <summary>
            Анализ текста
            </summary>
            <param name="pathDic">Путь до словаря</param>
        </member>
        <member name="M:AI.NLP.TextAnalise.GetSemantic(System.String,System.Boolean)">
            <summary>
            Семантика из предложения
            </summary>
            <param name="sen">Предложение</param>
            <param name="stop">Учитывать ли стоп-слова</param>
            <returns></returns>
        </member>
        <member name="M:AI.NLP.TextAnalise.Sim(System.String,System.String)">
            <summary>
            Семантическая близость 2-х текстов
            </summary>
            <param name="str1">Первый текст</param>
            <param name="str2">Второй текст</param>
            <returns>Коэфициент сходства</returns>
        </member>
        <member name="M:AI.NLP.TextAnalise.Sim(AI.Vector,AI.Vector)">
            <summary>
            Близость 2-х векторов
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:AI.NLP.TextAnalise.Train(System.String,AI.Vector,System.Double)">
            <summary>
            Обучение словаря
            </summary>
            <param name="sen">Предложение</param>
            <param name="ideal">Идеальный вектор тем</param>
            <param name="norm">Норма обучения</param>
        </member>
        <member name="M:AI.NLP.TextAnalise.GetWords(System.String)">
            <summary>
            Парсер
            </summary>
            <param name="text">Текст</param>
            <returns>Список слов</returns>
        </member>
        <member name="M:AI.NLP.TextAnalise.SaveDic(System.String)">
            <summary>
            Сохранение словаря
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.NLP.TextAnalise.SeqNormalise(System.String)">
            <summary>
            Нормализация предложения
            </summary>
            <param name="str">ненормализованное предложение</param>
            <returns>нормализованное</returns>
        </member>
        <member name="T:AI.NLP.WordToSemantic">
            <summary>
            Перевод слова в семантический вектор
            </summary>
        </member>
        <member name="M:AI.NLP.WordToSemantic.#ctor(System.String)">
            <summary>
            Загрузка
            </summary>
            <param name="path">Путь до словаря</param>
        </member>
        <member name="M:AI.NLP.WordToSemantic.Word2Sem(System.String[])">
            <summary>
            Преобразование в вектор
            </summary>
            <param name="text">Слова</param>
            <returns></returns>
        </member>
        <member name="M:AI.NLP.WordToSemantic.SentenceToVectorArray(System.String)">
            <summary>
            Преобразование предложения в массив векторов
            </summary>
            <param name="sentence">предложение</param>
            <returns>Массив векторов</returns>
        </member>
        <member name="T:AI.Properties.Resources">
            <summary>
              Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
            </summary>
        </member>
        <member name="P:AI.Properties.Resources.ResourceManager">
            <summary>
              Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
            </summary>
        </member>
        <member name="P:AI.Properties.Resources.Culture">
            <summary>
              Перезаписывает свойство CurrentUICulture текущего потока для всех
              обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
            </summary>
        </member>
        <member name="T:AI.Signals.DCT">
            <summary>
            Дискретно-косинусное преобразование
            </summary>
        </member>
        <member name="P:AI.Signals.DCT.MainMatrix">
            <summary> 
            Матрица прямого преобразования
            </summary>
        </member>
        <member name="P:AI.Signals.DCT.InvMatrix">
            <summary> 
            Матрица обратного преобразования
            </summary>
        </member>
        <member name="M:AI.Signals.DCT.#ctor">
            <summary>
            Дискретно-косинусное преобразование
            </summary>
        </member>
        <member name="M:AI.Signals.DCT.#ctor(System.Int32,System.Int32)">
            <summary>
            Дискретно-косинусное преобразование
            </summary>
            <param name="countInp">Кол-во входов</param>
            <param name="countOutp">Код-во Выходов</param>
        </member>
        <member name="M:AI.Signals.DCT.GetMatrW(System.Int32,System.Int32)">
            <summary>
            Матрица
            </summary>
            <param name="N"></param>
            <param name="M"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Signals.DCT.FDCT(AI.Vector)">
            <summary>
            Прямое ДКТ
            </summary>
            <param name="inp"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Signals.DCT.IDCT(AI.Vector)">
            <summary>
            Обратное Дкт
            </summary>
            <param name="inp"></param>
            <returns></returns>
        </member>
        <member name="T:AI.Signals.DrawSignalControl.DrawSigControl">
            <summary>
            Description of DrawSigControl.
            </summary>
        </member>
        <member name="M:AI.Signals.DrawSignalControl.DrawSigControl.#ctor">
            <summary>
            Получение сигнала из картинки
            </summary>
        </member>
        <member name="M:AI.Signals.DrawSignalControl.DrawSigControl.DrawSigControl_GetVector(AI.Vector)">
            <summary>
            Заглушка
            </summary>
            <param name="obj"></param>
        </member>
        <member name="F:AI.Signals.DrawSignalControl.DrawSigControl.components">
            <summary>
            Designer variable used to keep track of non-visual components.
            </summary>
        </member>
        <member name="M:AI.Signals.DrawSignalControl.DrawSigControl.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by the control.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AI.Signals.DrawSignalControl.DrawSigControl.InitializeComponent">
            <summary>
            This method is required for Windows Forms designer support.
            Do not change the method contents inside the source code editor. The Forms designer might
            not be able to load this method if it was changed manually.
            </summary>
        </member>
        <member name="T:AI.Signals.DrawSignalControl.SigData">
            <summary>
            Description of SigData.
            </summary>
        </member>
        <member name="M:AI.Signals.DrawSignalControl.SigData.BmpToVector(System.Drawing.Bitmap)">
            <summary>
            Преобразование изображения сигнала в его дискретные отсчеты
            </summary>
            <param name="bmp">Изображение</param>
            <returns>Возвращает пару векторов 1-й отсчеты времени, 2-й сигнала</returns>
        </member>
        <member name="T:AI.Signals.FastHilbert">
            <summary>
            Description of Hilbert.
            </summary>
        </member>
        <member name="M:AI.Signals.FastHilbert.ConjugateToTheHilbert(AI.Vector)">
            <summary>
            Сигнал сопряженный по Гильберту
            </summary>
            <param name="st">Исходный сигнал</param>
        </member>
        <member name="M:AI.Signals.FastHilbert.GetAnalSig(AI.Vector)">
            <summary>
            Аналитический сигнал
            </summary>
            <param name="st">Входной сигнал</param>
        </member>
        <member name="M:AI.Signals.FastHilbert.Ogib(AI.Vector)">
            <summary>
            Огибающая
            </summary>
            <param name="st">Входной сигнал</param>
        </member>
        <member name="M:AI.Signals.FastHilbert.Phase(AI.Vector)">
            <summary>
            Мгновенная фаза
            </summary>
            <param name="st">Входной сигнал</param>
        </member>
        <member name="M:AI.Signals.FastHilbert.Frequency(AI.Vector)">
            <summary>
            Мгновенная частота
            </summary>
            <param name="st">Входной сигнал</param>
        </member>
        <member name="M:AI.Signals.FastHilbert.OgibNew(AI.Vector,AI.Vector,System.Double)">
            <summary>
            Выделение огибающей на базе квадратурн. сост
            </summary>
        </member>
        <member name="T:AI.Signals.Filters">
            <summary>
            Класс для реализации цифровых фильтров
            </summary>
        </member>
        <member name="M:AI.Signals.Filters.Filter(AI.Vector,AI.Vector,System.Boolean)">
            <summary>
            Реализация простого фильтра
            </summary>
            <param name="st">Вектор сигнала</param>
            <param name="kw">АЧХ</param>
            <param name="mean">Нужна ли постоянная составляющая</param>
            <returns>Фильтрованный сигнал</returns>
        </member>
        <member name="M:AI.Signals.Filters.FilterKontur(AI.Vector,System.Double,System.Double,System.Int32)">
            <summary>
            Реализация колебательного контура
            </summary>
            <param name="st">Вектор сигнала</param>
            <param name="Q">Добротность</param>
            <param name="f0">Резонансная частота</param>
            <param name="fd">Частота дискретизации</param>
            <returns>Фильтрованный сигнал</returns>
        </member>
        <member name="M:AI.Signals.Filters.FilterLow(AI.Vector,System.Double,AI.Vector)">
            <summary>
            ФНЧ
            </summary>
            <param name="st">Отсчеты сигнала</param>
            <param name="sr">Частота среза</param>
            <param name="f">Вектор частот</param>
            <returns>Фильтрованный сигнал</returns>
        </member>
        <member name="M:AI.Signals.Filters.FilterBand(AI.Vector,System.Double,System.Double,AI.Vector)">
            <summary>
            Полосовой фильтр
            </summary>
            <param name="st">Отсчеты сигнала</param>
            <param name="sr1">Частота среза 1</param>
            <param name="sr2">Частота среза 2</param>
            <param name="f">Вектор частот</param>
            <returns>Фильтрованный сигнал</returns>
        </member>
        <member name="M:AI.Signals.Filters.FilterHigh(AI.Vector,System.Double,AI.Vector)">
            <summary>
            ФВЧ
            </summary>
            <param name="st">Отсчеты сигнала</param>
            <param name="sr">Частота среза</param>
            <param name="f">Вектор частот</param>
            <returns>Фильтрованный сигнал</returns>
        </member>
        <member name="M:AI.Signals.Filters.FilterRezector(AI.Vector,System.Double,System.Double,AI.Vector)">
            <summary>
            Режекторный фильтр
            </summary>
            <param name="st">Отсчеты сигнала</param>
            <param name="sr1">Частота среза 1</param>
            <param name="sr2">Частота среза 2</param>
            <param name="f">Вектор частот</param>
            <returns>Фильтрованный сигнал</returns>
        </member>
        <member name="M:AI.Signals.Filters.GetAFH(AI.Vector,System.Double[],AI.Signals.AFHType)">
            <summary>
            Создание АЧХ нужного типа
            </summary>
            <param name="f">Вектор частот</param>
            <param name="param">параметры</param>
            <param name="afh">Тип АЧХ</param>
        </member>
        <member name="M:AI.Signals.Filters.CreationComplexAFH(AI.Vector,System.String[])">
            <summary>
            Создание составной АЧХ
            </summary>
            <param name="f">Вектор частот</param>
            <param name="param">Параметры</param>
            <returns>Возвращает АЧХ</returns>
        </member>
        <member name="M:AI.Signals.Filters.ExpAv(AI.Vector,System.Double)">
            <summary>
            Эспоненциональное скользящее среднее
            </summary>
            <param name="inp">Вход</param>
            <param name="oldPart">Коэффициент сглаживания</param>
            <returns></returns>
        </member>
        <member name="M:AI.Signals.Filters.MAv(AI.Vector,System.Int32)">
            <summary>
            Cкользящее среднее
            </summary>
            <param name="inp">Вход</param>
            <param name="l">Размер окна</param>
        </member>
        <member name="M:AI.Signals.Filters.GetEnvelope(AI.Vector,System.Int32)">
            <summary>
            Получение огибающей
            </summary>
            <param name="inp"></param>
            <param name="dec">Прореживание</param>
        </member>
        <member name="T:AI.Signals.AFHType">
            <summary>
            Типы АЧХ
            </summary>
        </member>
        <member name="F:AI.Signals.AFHType.Low">
            <summary>
            ФНЧ
            </summary>
        </member>
        <member name="F:AI.Signals.AFHType.High">
            <summary>
            ФВЧ
            </summary>
        </member>
        <member name="F:AI.Signals.AFHType.Rezector">
            <summary>
            Режектор
            </summary>
        </member>
        <member name="F:AI.Signals.AFHType.Band">
            <summary>
            Полосовой
            </summary>
        </member>
        <member name="M:AI.Signals.FurCor.FFT.DoFFT(AI.ComplexVector)">
            <summary>
            Perform a complex fast fourier transform on an array.
            </summary>
            <param name="samples">array of audio samples (imaginary part will be zero)</param>
            <returns>the fourier transformation of the samples</returns>
        </member>
        <member name="M:AI.Signals.FurCor.FFT.Convolve(AI.ComplexVector,AI.ComplexVector)">
            <summary>
            Perform 1D convolution of two complex arrays.
            </summary>
            <param name="signalToConvolve1"></param>
            <param name="signalToConvolve2"></param>
            <returns>the fourier transformation of the samples</returns>
        </member>
        <member name="M:AI.Signals.FurCor.FFT.ConvolveWithIR(AI.ComplexVector,AI.ComplexVector)">
            <summary>
            Выполняет одномерную свертку двух компл. векторов разной разм.
            </summary>
            <param name="signalToConvolve1"></param>
            <param name="signalToConvolve2"></param>
            <returns>the fourier transformation of the samples</returns>
        </member>
        <member name="M:AI.Signals.FurCor.FFT.DoCrossCorrelation(AI.ComplexVector,AI.ComplexVector)">
            <summary>
            Perform cross-correlation of two complex arrays.
            </summary>
            <param name="complexArrayX">array of audio samples (imaginary part will be zero)</param>
            <param name="complexArrayY">array of audio samples (imaginary part will be zero)</param>
            <returns>the cross-correlation of the samples</returns>
        </member>
        <member name="M:AI.Signals.FurCor.FFT.DoIRFFT(AI.ComplexVector,System.Int32)">
            <summary>
            Perform a complex fast Fourier transform on an array with a specified number of samples.
            </summary>
            <param name="complexArray">array of audio samples (imaginary parts will be zero)</param>
            <param name="numSamples">number of samples in longer file</param>
            <returns>the Fourier transformation of the samples</returns>
        </member>
        <member name="M:AI.Signals.FurCor.FFT.RecursiveFFT(System.Numerics.Complex[])">
            <summary>
            Recursively compute the complex fast Fourier transform of an array. 
            Implemented using a recursive implementation of the Cooley-Tukey radix-2 algorithm: O(n log n)
            </summary>
            <param name="complexArray">array of complexArray (size should be padded with zeros to a length of the first power of 2
            equal to or greater than the intial length</param>
            <returns>the discrete Fourier transformation of the complexArray</returns>
        </member>
        <member name="M:AI.Signals.FurCor.FFT.DoInverseFFT(AI.ComplexVector)">
            <summary>
            Recursively compute an inverse complex fast Fourier transform of an array. 
            Implemented using a recursive implementation of the Cooley-Tukey radix-2 algorithm: O(n log n)
            </summary>
            <param name="complexVector">array of complexArray (size should be padded with zeros to a length of the first power of 2
            equal to or greater than the intial length</param>
            <returns>the fourier transformation of the complexArray</returns>
        </member>
        <member name="M:AI.Signals.FurCor.FFT.FindSampleOffset(System.IO.MemoryStream,System.IO.MemoryStream)">
            <summary>
            Finds the relative offset in # of samples between two PCM/wav files
            </summary>
            <param name="memoryStreamX">A memory stream the emitted test signal PCM data</param>
            <param name="memoryStreamY">A memory stream of the PCM data of the captured result</param>
            <returns>The number of samples between the click in memoryStreamX and that of memoryStreamY</returns>
        </member>
        <member name="M:AI.Signals.FurCor.FFT.IsPowerOfTwo(System.Int64)">
            <summary>
            Checks if a number is a power of two.
            Handles the 0 and negative value cases.
            </summary>
            <param name="num">number to check</param>
            <returns>true if the parameter represents a power of two, false otherwise</returns>
        </member>
        <member name="M:AI.Signals.FurCor.FFT.ResizeAndZeroPad(System.Numerics.Complex[],System.Int32)">
            <summary>
            Right-pad the array length with zeros to the first power of 2 which is either
            A) equal to or greater than twice the original array length (default behavior - 'targetSamples' set to 0), 
            or
            B) equal to or greater than twice the length specified by the 'targetSamples' parameter,
                if the integer passed is greater than the original array length
            
            ~~ note on second parameter ~~
            - the 'targetSamples' parameter specifies the minimum number of
               samples from which to resize and zero-pad. This is useful when convolving a long signal
               with a short impulse response.
            - it only has an effect if a value greater than the original array length is passed
            </summary>
            <param name="complexArray">the complex array to resize</param>
            <param name="targetSamples">minimum number of samples from which to size the padded array (0 == default behavior)</param>
            <returns></returns>
        </member>
        <member name="M:AI.Signals.FurCor.FFT.NecessarySignificantBits(System.Int32)">
            <summary>
            Compute the number of significant bits required to store a number
            (the first sufficiently large power of 2)
            </summary>
            <param name="num">a number</param>
            <returns>minimum number of bits necessary to store the number</returns>
        </member>
        <member name="T:AI.Signals.GetSpectrEnerge">
            <summary>
            Description of GetSpectrEnerge.
            </summary>
        </member>
        <member name="M:AI.Signals.GetSpectrEnerge.#ctor(System.Double)">
            <summary>
            Анализ формант
            </summary>
            <param name="fd">Частота дискретизации</param>
        </member>
        <member name="M:AI.Signals.GetSpectrEnerge.Add(System.Double,System.Double)">
            <summary>
            Добавление диапозона частот
            </summary>
            <param name="b">Начальная частота форманты</param>
            <param name="e">Конечная частота форманты</param>
        </member>
        <member name="M:AI.Signals.GetSpectrEnerge.GetAmplFreq(AI.Vector)">
            <summary>
             Возвращает суммарные амплитуды в формантах
            </summary>
            <param name="inp">Входной вектор</param>
            <returns>Вектор амплитуд</returns>
        </member>
        <member name="T:AI.Signals.Kepstr">
             <summary>
            Кепстральный анализ
             </summary>
        </member>
        <member name="M:AI.Signals.Kepstr.FKT(AI.Vector)">
            <summary>
            Быстрое кепстральное преобразование
            </summary>
            <param name="signal">Сигнал</param>
            <returns></returns>
        </member>
        <member name="M:AI.Signals.Kepstr.FKT(AI.ComplexVector)">
            <summary>
            Быстрое кепстральное преобразование
            </summary>
            <param name="signal">Сигнал</param>
            <returns></returns>
        </member>
        <member name="T:AI.Signals.OptimalFilter">
            <summary>
            Description of OptimalFilter.
            </summary>
        </member>
        <member name="M:AI.Signals.OptimalFilter.#ctor(AI.Vector,System.Int32)">
            <summary>
            Оптимальный (согласованный) фильтр
            </summary>
            <param name="signal"></param>
            <param name="n"></param>
        </member>
        <member name="M:AI.Signals.OptimalFilter.Result(AI.Vector)">
            <summary>
            Прохождение фильтра
            </summary>
            <param name="signal">Сигнал на входе</param>
        </member>
        <member name="M:AI.Signals.OptimalFilter.SpectrCompressLFM(AI.Vector,System.Int32)">
            <summary>
            Сжатие ЛЧМ по спектру
            </summary>
        </member>
        <member name="T:AI.Signals.Signal">
            <summary>
            Description of Signal.
            </summary>
        </member>
        <member name="M:AI.Signals.Signal.Sin(AI.Vector,System.Double,System.Double,System.Double)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">частота</param>
            <param name="fi">Начальная фаза</param>
        </member>
        <member name="M:AI.Signals.Signal.Sin(AI.Vector,System.Double,AI.Vector,System.Double)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">частота</param>
            <param name="fi">Начальная фаза</param>
        </member>
        <member name="M:AI.Signals.Signal.Sin(AI.Vector,System.Double,System.Double,AI.Vector)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">частота</param>
            <param name="fi">Начальная фаза</param>
        </member>
        <member name="M:AI.Signals.Signal.Sin(AI.Vector,AI.Vector,System.Double,System.Double)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">частота</param>
            <param name="fi">Начальная фаза</param>
        </member>
        <member name="M:AI.Signals.Signal.Sin(AI.Vector,System.Double,System.Double)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">частота</param>
        </member>
        <member name="M:AI.Signals.Signal.Frequency(System.Int32,System.Double)">
            <summary>
            Массив частот
            </summary>
            <param name="N">Кол-во значений</param>
            <param name="fd">Частота дискретизации</param>
            <returns>Вектор частот</returns>
        </member>
        <member name="M:AI.Signals.Signal.FrequencyCentr(System.Int32,System.Double)">
            <summary>
            Центрированный массив частот 
            </summary>
            <param name="N">Кол-во значений</param>
            <param name="fd">Частота дискретизации</param>
            <returns>Вектор частот</returns>
        </member>
        <member name="M:AI.Signals.Signal.Sin(AI.Vector,System.Double,AI.Vector)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">частота</param>
        </member>
        <member name="M:AI.Signals.Signal.Sin(AI.Vector,AI.Vector,System.Double)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">частота</param>
        </member>
        <member name="M:AI.Signals.Signal.Sin(AI.Vector,System.Double)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="f">частота</param>
        </member>
        <member name="M:AI.Signals.Signal.Sin(AI.Vector,AI.Vector)">
            <summary>
            Синусоидальные колебания
            </summary>
            <param name="t">Вектор времени</param>
            <param name="f">частота</param>
        </member>
        <member name="M:AI.Signals.Signal.Rect(AI.Vector,System.Double,System.Double,System.Double)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">Частота</param>
            <param name="fi">Фаза</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.Signals.Signal.Rect(AI.Vector,AI.Vector,System.Double,System.Double)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="A">Вектор амплитуд</param>
            <param name="f">Частота</param>
            <param name="fi">Фаза</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.Signals.Signal.Rect(AI.Vector,System.Double,AI.Vector,System.Double)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">Вектор частот</param>
            <param name="fi">Фаза</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.Signals.Signal.Rect(AI.Vector,System.Double,System.Double,AI.Vector)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">Частота</param>
            <param name="fi">Вектор фаз</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.Signals.Signal.Rect(AI.Vector,System.Double,System.Double)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">Частота</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.Signals.Signal.Rect(AI.Vector,System.Double,AI.Vector)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="A">Амплитуда</param>
            <param name="f">Вектор частот</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.Signals.Signal.Rect(AI.Vector,AI.Vector,System.Double)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="A">Вектор амплитуда</param>
            <param name="f">Вектор частот</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.Signals.Signal.Rect(AI.Vector,System.Double)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="f">Частота</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.Signals.Signal.Rect(AI.Vector,AI.Vector)">
            <summary>
            Прямоугольный сигнал
            </summary>
            <param name="t">Вектор отсчетов времени</param>
            <param name="f">Вектор частот</param>
            <returns>Отсчеты сигнала</returns>
        </member>
        <member name="M:AI.Signals.Signal.AmkRect(AI.Vector,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Амплитудно-модулированые колебания (прямоугольное модулирующее колебание)
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f1">Несущая частота</param>
            <param name="fi1">Фаза модулирующего сигала</param>
            <param name="f2">Частота модулятора</param>
            <param name="fi2">Фаза модулируемого сигала</param>
            <param name="k">Коэффициент модуляции</param>
            <returns>Вектор отсчетов</returns>
        </member>
        <member name="M:AI.Signals.Signal.AmkRect(AI.Vector,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Амплитудно-модулированые колебания (прямоугольное модулирующее колебание)
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f1">Несущая частота</param>
            <param name="f2">Частота модулятора</param>
            <param name="fi2">Фаза модулируемого сигала</param>
            <param name="k">Коэффициент модуляции</param>
            <returns>Вектор отсчетов</returns>
        </member>
        <member name="M:AI.Signals.Signal.AmkRect(AI.Vector,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Амплитудно-модулированые колебания (прямоугольное модулирующее колебание)
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f1">Несущая частота</param>
            <param name="f2">Частота модулятора</param>
            <param name="k">Коэффициент модуляции</param>
            <returns>Вектор отсчетов</returns>
        </member>
        <member name="M:AI.Signals.Signal.AmkRectK(AI.Vector,System.Double,System.Double,System.Double)">
            <summary>
            Амплитудно-модулированые колебания (прямоугольное модулирующее колебание)
            </summary>
            <param name="t">Вектор времени</param>
            <param name="f1">Несущая частота</param>
            <param name="f2">Частота модулятора</param>
            <param name="k">Коэффициент модуляции</param>
            <returns>Вектор отсчетов</returns>
        </member>
        <member name="M:AI.Signals.Signal.AmkRectA(AI.Vector,System.Double,System.Double,System.Double)">
            <summary>
            Амплитудно-модулированые колебания (прямоугольное модулирующее колебание)
            </summary>
            <param name="t">Вектор времени</param>
            <param name="A">Амплитуда</param>
            <param name="f1">Несущая частота</param>
            <param name="f2">Частота модулятора</param>
            <returns>Вектор отсчетов</returns>
        </member>
        <member name="M:AI.Signals.Signal.AmkRect(AI.Vector,System.Double,System.Double)">
            <summary>
            Амплитудно-модулированые колебания
            </summary>
            <param name="t"></param>
            <param name="f1"></param>
            <param name="f2"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Signals.Signal.DampedOscillations(AI.Vector,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Затухающие колебания
            </summary>
            <param name="t">Время симуляции</param>
            <param name="f">частота</param>
            <param name="kDamp">Коэффициент затухания</param>
            <param name="A">Амплитуда(начальная)</param>
            <param name="fi">Фаза</param>
        </member>
        <member name="M:AI.Signals.Signal.Energe(AI.Vector,System.Double)">
            <summary>
            Энергия выделяемая на едичном резисторе за все время
            </summary>
            <param name="signal">Сигнал отсчеты</param>
            <param name="fd">Частота дискретизация</param>
            <returns></returns>
        </member>
        <member name="M:AI.Signals.Signal.LFMRectNP(System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            Пачка ЛЧМ
            </summary>
            <param name="f"></param>
            <param name="f0"></param>
            <param name="fd"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Signals.Signal.LFM(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            ЛЧМ
            </summary>
            <param name="df"></param>
            <param name="f0"></param>
            <param name="fd"></param>
            <param name="time"></param>
        </member>
        <member name="M:AI.Signals.Signal.Perediscr(AI.Vector,System.Int32,System.Int32)">
            <summary>
            Передискретизация сигнала
            (повышение частоты дискретизации в целое число раз)
            </summary>
            <param name="inp">Входной вектор</param>
            <param name="fd">Старая частота дискретизации</param>
            <param name="newfd">Новая частота дикретизации</param>
            <returns>Вектор тойже длительности, что и входной,
            но с более высокой частотой дискретизации</returns>
        </member>
        <member name="M:AI.Signals.Signal.Norm(AI.Vector,System.Double)">
            <summary>
            Норма сигнала
            </summary>
            <param name="signal"></param>
            <param name="fd"></param>
            <returns></returns>
        </member>
        <member name="T:AI.Signals.Wavelet">
            <summary>
            Вейвлеты
            </summary>
        </member>
        <member name="M:AI.Signals.Wavelet.#ctor(AI.Signals.PerentWavelet)">
            <summary>
            Непрерывное вейвлет преобразование
            </summary>
            <param name="pw">Порождение вейвлетов</param>
        </member>
        <member name="M:AI.Signals.Wavelet.SerchPatern(AI.Vector)">
            <summary>
            Поиск патернов в сигнале
            </summary>
            <param name="sig">Сигнал</param>
            <returns>Максимумы патернов</returns>
        </member>
        <member name="T:AI.Signals.PerentWavelet">
            <summary>
            Ф-я порождения вейвлетов
            </summary>
        </member>
        <member name="F:AI.Signals.PerentWavelet.waveletSpectrs">
            <summary>
            Спектры ф-й
            </summary>
        </member>
        <member name="F:AI.Signals.PerentWavelet.fur">
            <summary>
            Фурье
            </summary>
        </member>
        <member name="F:AI.Signals.PerentWavelet.std">
            <summary>
            Вектор СКО
            </summary>
        </member>
        <member name="F:AI.Signals.PerentWavelet.scals">
            <summary>
            Масштабы
            </summary>
        </member>
        <member name="M:AI.Signals.PerentWavelet.#ctor(System.Func{System.Double,AI.Vector},AI.Vector,System.Int32)">
            <summary>
            Порождения вейвлетов
            </summary>
            <param name="wavelet">Порождающая функция</param>
            <param name="scales">Масштабы</param>
            <param name="n">Размерность входа</param>
        </member>
        <member name="T:AI.Sound">
            <summary>
            Description of Sound.
            </summary>
        </member>
        <member name="F:AI.Sound.chunkID">
            <summary>
            ID
            </summary>
        </member>
        <member name="F:AI.Sound.fileSize">
            <summary>
            Размер файла
            </summary>
        </member>
        <member name="F:AI.Sound.riffType">
            <summary>
            Тип
            </summary>
        </member>
        <member name="F:AI.Sound.fmtID">
            <summary>
            
            </summary>
        </member>
        <member name="F:AI.Sound.fmtSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:AI.Sound.fmtCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:AI.Sound.channels">
            <summary>
            Каналы (число)
            </summary>
        </member>
        <member name="F:AI.Sound.sampleRate">
            <summary>
            Частота дискретизации
            </summary>
        </member>
        <member name="F:AI.Sound.fmtAvgBPS">
            <summary>
            средний битрейт
            </summary>
        </member>
        <member name="F:AI.Sound.fmtBlockAlign">
            <summary>
            
            </summary>
        </member>
        <member name="F:AI.Sound.bitDepth">
            <summary>
            
            </summary>
        </member>
        <member name="F:AI.Sound.dataID">
            <summary>
            
            </summary>
        </member>
        <member name="F:AI.Sound.dataSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:AI.Sound.#ctor">
            <summary>
            Звук
            </summary>
        </member>
        <member name="M:AI.Sound.SoundLoad(System.String)">
            <summary>
            Загрузка звука
            </summary>
            <param name="path">Путь до файла</param>
            <returns></returns>
        </member>
        <member name="M:AI.Sound.SaveVector(System.String,AI.Vector,System.Int32)">
            <summary>
            Сохранение вектора как звука
            </summary>
            <param name="path"></param>
            <param name="vector"></param>
            <param name="fd"></param>
        </member>
        <member name="M:AI.Sound.PlayVector(AI.Vector,System.Int32)">
            <summary>
            Вопроизведение
            </summary>
            <param name="vector"></param>
            <param name="fd"></param>
        </member>
        <member name="T:AI.SparseData.Cell1D`1">
            <summary>
            Description of Cell.
            </summary>
        </member>
        <member name="P:AI.SparseData.Cell1D`1.Value">
            <summary>
            Значение
            </summary>
        </member>
        <member name="P:AI.SparseData.Cell1D`1.Coordinats">
            <summary>
            Коорд.
            </summary>
        </member>
        <member name="F:AI.SparseData.Cell1D`1.coordinate">
            <summary>
            Коорд.
            </summary>
        </member>
        <member name="M:AI.SparseData.Cell1D`1.#ctor">
            <summary>
            одномерная клетка
            </summary>
        </member>
        <member name="M:AI.SparseData.Cell1D`1.#ctor(`0,System.Int32)">
            <summary>
            одномерная клетка
            </summary>
        </member>
        <member name="T:AI.SparseData.ICell`1">
            <summary>
            Description of ICell.
            </summary>
        </member>
        <member name="P:AI.SparseData.ICell`1.Value">
            <summary>
            Значение
            </summary>
        </member>
        <member name="P:AI.SparseData.ICell`1.Coordinats">
            <summary>
            Координаты
            </summary>
        </member>
        <member name="T:AI.SparseData.ILattice`1">
            <summary>
            Description of ILattice.
            </summary>
        </member>
        <member name="T:AI.SparseData.Lattice1D`1">
            <summary>
            Description of Lattice1D.
            </summary>
        </member>
        <member name="P:AI.SparseData.Lattice1D`1.Cells">
            <summary>
            Ячейки
            </summary>
        </member>
        <member name="M:AI.SparseData.Lattice1D`1.#ctor">
            <summary>
            Одномерная решетка
            </summary>
        </member>
        <member name="M:AI.SparseData.Lattice1D`1.#ctor(AI.SparseData.Cell1D{`0}[])">
            <summary>
            Одномерная решетка
            </summary>
        </member>
        <member name="M:AI.SparseData.Lattice1D`1.op_Multiply(AI.SparseData.Lattice1D{`0},AI.Matrix)">
            <summary>
            Умножение решетки матрицу 
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.SparseData.Lattice1D`1.ToString">
            <summary>
            Одномерная решетка в строку
            </summary>
        </member>
        <member name="T:AI.SparseData.Lattice1DDouble">
            <summary>
            Description of Lattice1DDouble.
            </summary>
        </member>
        <member name="M:AI.SparseData.Lattice1DDouble.#ctor(AI.SparseData.Cell1D{System.Double}[])">
            <summary>
            Одномерная решетка double
            </summary>
            <param name="cels"></param>
        </member>
        <member name="M:AI.SparseData.Lattice1DDouble.#ctor(AI.Vector)">
            <summary>
            Одномерная решетка double
            </summary>
        </member>
        <member name="M:AI.SparseData.Lattice1DDouble.op_Multiply(AI.SparseData.Lattice1DDouble,AI.Matrix)">
            <summary>
            Умножение решетки матрицу 
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="T:AI.Statistics.Histogramm">
            <summary>
            Структура гистограммы
            </summary>
        </member>
        <member name="P:AI.Statistics.Histogramm.X">
            <summary>
            Значения столбцов
            </summary>
        </member>
        <member name="P:AI.Statistics.Histogramm.Y">
            <summary>
            Высоты столбцов
            </summary>
        </member>
        <member name="P:AI.Statistics.Histogramm.Name">
            <summary>
            Название гистограммы
            </summary>
        </member>
        <member name="P:AI.Statistics.Histogramm.Info">
            <summary>
            Описание гистограммы
            </summary>
        </member>
        <member name="P:AI.Statistics.Histogramm.XLable">
            <summary>
            Название оси "Х" гистограммы
            </summary>
        </member>
        <member name="P:AI.Statistics.Histogramm.YLables">
            <summary>
            Название оси "У" гистограммы
            </summary>
        </member>
        <member name="M:AI.Statistics.Histogramm.Save(System.String)">
            <summary>
            Сохранение гистограммы
            </summary>
            <param name="path">Путь до файла</param>
        </member>
        <member name="M:AI.Statistics.Histogramm.Open(System.String)">
            <summary>
            Загрузка гистограммы
            </summary>
            <param name="path">Путь до файла</param>		
        </member>
        <member name="T:AI.Statistics.Statistic">
            <summary>
            Класс содержит методы для статистического анализа.
            А так же генераторы псевдо случайных чисел
            </summary>
        </member>
        <member name="P:AI.Statistics.Statistic.SCO">
            <summary>
            Среднеквадратичное отклонение
            </summary>
        </member>
        <member name="P:AI.Statistics.Statistic.MinValue">
            <summary>
            Минимальное значение в массиве
            </summary>
        </member>
        <member name="P:AI.Statistics.Statistic.MaxValue">
            <summary>
            Максимальное значение в массиве
            </summary>
        </member>
        <member name="P:AI.Statistics.Statistic.Dispersia">
            <summary>
            Дисперсия
            </summary>
        </member>
        <member name="P:AI.Statistics.Statistic.Expected">
            <summary>
            Математическое ожидание
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.#ctor(AI.Vector)">
            <summary>
            Создает объек класса Statistic, принимает вектор входных значений случайной переменной
            </summary>
            <param name="A">Вектор значений</param>
        </member>
        <member name="M:AI.Statistics.Statistic.ExpectedValue">
            <summary>
            Математическое ожидание
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Statistic.Dispers">
            <summary>
            Дисперсия
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.Std">
            <summary>
            СКО
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.Dispers(AI.Vector)">
            <summary>
            Дисперсия вектора
            </summary>
            <param name="vector">Входной вектор</param>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Statistic.Std(AI.Vector)">
            <summary>
            Среднеквадратичное отклонение
            </summary>
            <param name="vector">Входной вектор</param>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Statistic.CharacteristicFunction">
            <summary>
            Характеристическая функция
            </summary>
            <returns>Возвращает вектор отсчетов</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.CharacteristicFunc">
            <summary>
            Характеристическая функция
            </summary>
            <returns>Возвращает вектор отсчетов</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.rand(System.Int32)">
            <summary>
            Генератор случайных чисел с равномерным распределением
            </summary>
            <param name="n">Длинна вектора</param>
            <returns>Возвращает вектор случайных чисел</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.Gauss(System.Random)">
            <summary>
            Гауссовское распределение
            </summary>
            <returns>Возвращает норм. распред величину СКО = 1, M = 0</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.randNorm(System.Int32)">
            <summary>
            Генератор случайных чисел с нормальным распределением
            </summary>
            <param name="n">Длинна вектора</param>
            <returns>Возвращает вектор случайных чисел</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.randNorm(System.Int32,System.Random)">
            <summary>
            Генератор случайных чисел с нормальным распределением
            </summary>
            <param name="n">Длинна вектора</param>
            <param name="rnd">Генератор случайных чисел</param>
            <returns>Возвращает вектор случайных чисел</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.rand(System.Int32,System.Int32)">
            <summary>
            Cоздает матрицу с равномерно распределенными значениями
            размерности m на n
            </summary>
            <param name="m">Количество строк</param>
            <param name="n">Количество столбцов</param>
        </member>
        <member name="M:AI.Statistics.Statistic.MaximalValue(AI.Vector)">
            <summary>
            Максимальное значение вектора
            </summary>
            <param name="vect">Вектор</param>
        </member>
        <member name="M:AI.Statistics.Statistic.MinimalValue(AI.Vector)">
            <summary>
            Минимальное значение вектора
            </summary>
            <param name="vect">Вектор</param>
        </member>
        <member name="M:AI.Statistics.Statistic.rand(System.Int16)">
            <summary>
            Cоздает матрицу с равномерно распределенными значениями
            размерности n на n
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.ExpectedValue(AI.Vector)">
            <summary>
            Математическое ожидание
            </summary>
            <param name="vector">вектор, содержащий отсчеты случайной величины</param>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Statistic.randNorm(System.Int32,System.Int32)">
            <summary>
            Cоздает матрицу с нормально распределенными значениями
            размерности m на n
            </summary>
            <param name="m">Количество строк</param>
            <param name="n">Количество столбцов</param>
        </member>
        <member name="M:AI.Statistics.Statistic.randNorm(System.Int32,System.Int32,System.Random)">
            <summary>
            Cоздает матрицу с нормально распределенными значениями
            размерности m на n
            </summary>
            <param name="m">Количество строк</param>
            <param name="n">Количество столбцов</param>
            <param name="rnd">Генератор случ чисел</param>
        </member>
        <member name="M:AI.Statistics.Statistic.randNorm(System.Int16)">
            <summary>
            Cоздает матрицу с нормально распределенными значениями
            размерности n на n
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.randNorm">
            <summary>
            Генератор случайных чисел с нормальным распределением
            </summary>
            <returns>Возвращает случайные числа</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.Histogramm(System.Int32)">
            <summary>
            Строит гистограмму
            </summary>
            <param name="nRazr">Количество разрядов гистограммы</param>
            <returns>возращает вектор длинной nRazr, содержащий отсчеты для построения гистограммы</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.InitialMoment(System.Int32)">
            <summary>
            Начальный момент
            </summary>
            <param name="n">порядок момента 1,2,3...</param>
            <returns>Возвращает число типа Double</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.CentrMoment(System.Int32)">
            <summary>
            Центральный момент
            </summary>
            <param name="n">порядок момента 1,2,3...</param>
            <returns>Возвращает число типа Double</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.Asymmetry">
            <summary>
            Асимметрия распределения
            </summary>
            <returns>Возвращает коэффициент асимметрии, число типа Double</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.Excess">
            <summary>
            Эксцесс, "крутость" распределения
            </summary>
            <returns>Возвращает коэффициент эксцесса, число типа Double</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.Cov(AI.Vector,AI.Vector)">
            <summary>
            Ковариация(корреляционный момент, линейная зависимость) двух векторов,
            длины векторов должны быть равны
            </summary>
            <param name="X">первый вектор</param>
            <param name="Y">второй вектор</param>
            <returns>Возвращает число типа Double</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.CorrelationCoefficient(AI.Vector,AI.Vector)">
            <summary>
            Коэфициент корреляции
            </summary>
            <param name="X">Вектор X</param>
            <param name="Y">Вектор Y</param>
            <returns>Возвращает коэф. кор.</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.MeanVector(AI.Vector[])">
            <summary>
            Усреднение по выборке(ансамблю)
            </summary>
            <param name="vectors">Выборка</param>
            <returns>Средний вектор</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.MeanGeom(AI.Vector)">
            <summary>
            Среднее геометрическое 
            </summary>
        </member>
        <member name="M:AI.Statistics.Statistic.MeanGarmonic(AI.Vector)">
            <summary>
            Среднее гармоническое
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Statistic.RMS(AI.Vector)">
            <summary>
            Среднeквадратичное значение
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Statistic.EnsembleDispersion(AI.Vector[])">
            <summary>
            Дисперсия по ансамлю
            </summary>
            <param name="ensemble">Ансамбль векторов</param>
        </member>
        <member name="M:AI.Statistics.Statistic.MaxEns(AI.Vector[])">
            <summary>
            Максимум по ансамлю
            </summary>
            <param name="ensemble">Ансамбль векторов</param>
        </member>
        <member name="M:AI.Statistics.Statistic.MaxEnergeVector(AI.Vector[])">
            <summary>
            Возвращает вектор с максимальной энергией
            </summary>
            <param name="ens">Ансамбль векторов</param>
            <returns>Вектор с максимальной энергией</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.SimpleMeanFreq(AI.Vector,System.Double)">
            <summary>
            Средняя частота (не нормированная, зависит от кол-ва точек)
            </summary>
            <param name="signal">Сигнал</param>
            <param name="oldPart">Сглаживание</param>
            <returns></returns>
        </member>
        <member name="M:AI.Statistics.Statistic.MeanFreq(AI.Vector,System.Double,System.Double)">
            <summary>
            Средняя частота сигнала
            </summary>
            <param name="signal">Сигнал</param>
            <param name="fd">Частота дискретизации</param>
            <param name="oldPart">Коэффициент сглаживания</param>
            <returns>Средняя частота [Гц]</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.DivFreq(AI.Vector)">
            <summary>
            Изменение частоты
            </summary>
            <param name="signal">Сигнал</param>
            <returns>Дивиация средней частоты</returns>
        </member>
        <member name="M:AI.Statistics.Statistic.MeanStep(AI.Vector)">
            <summary>
            Средний шаг, насколько в среднем отличается x[i] от x[i+1]
            </summary>
            <param name="vector">Последовательность</param>
        </member>
        <member name="T:AI.Tensor">
            <summary>
                Представляет тензор 3-го ранга
            </summary>
        </member>
        <member name="F:AI.Tensor.Depth">
            <summary>
            Глубина
            </summary>
        </member>
        <member name="F:AI.Tensor.Height">
            <summary>
            Высота
            </summary>
        </member>
        <member name="F:AI.Tensor.DataInTensor">
            <summary>
            Значения
            </summary>
        </member>
        <member name="F:AI.Tensor.Width">
            <summary>
            Ширина
            </summary>
        </member>
        <member name="M:AI.Tensor.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Заполнение тензора случайными числами
            </summary>
            <param name="width">ширина</param>
            <param name="height">высота</param>
            <param name="depth">глубина</param>
        </member>
        <member name="M:AI.Tensor.#ctor(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Тензор 3-го ранга
            </summary>
            <param name="width">Ширина</param>
            <param name="height">Высота</param>
            <param name="depth">Глубина</param>
            <param name="c">Величина которой инициализируется тензор</param>
        </member>
        <member name="M:AI.Tensor.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary>
            Инициализация с помощь интерфейса IList
            </summary>
            <param name="weights">Значения</param>
        </member>
        <member name="M:AI.Tensor.Copy">
            <summary>
            Копирует значения
            </summary>
        </member>
        <member name="M:AI.Tensor.op_Addition(AI.Tensor,System.Double)">
            <summary>
            Сложение
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Tensor.op_Addition(System.Double,AI.Tensor)">
            <summary>
            Сложение
            </summary>
            <param name="A"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Tensor.op_Multiply(AI.Tensor,System.Double)">
            <summary>
            Умножение
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Tensor.op_Subtraction(AI.Tensor,System.Double)">
            <summary>
            Вычитание
            </summary>
        </member>
        <member name="M:AI.Tensor.op_Division(AI.Tensor,System.Double)">
            <summary>
            Деление
            </summary>
        </member>
        <member name="M:AI.Tensor.Get(System.Int32,System.Int32,System.Int32)">
            <summary>
            Выдает значение с заданной позиции
            </summary>
        </member>
        <member name="M:AI.Tensor.Set(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Устанавливает значение на заданную позицию
            </summary>
        </member>
        <member name="M:AI.Tensor.Normalise">
            <summary>
            Нормализация
            </summary>
        </member>
        <member name="M:AI.Tensor.ToVector">
            <summary>
            Преобразование в вектор
            </summary>
        </member>
        <member name="M:AI.Tensor.op_Subtraction(System.Double,AI.Tensor)">
            <summary>
            Вычитание
            </summary>
        </member>
        <member name="M:AI.Tensor.SetConst(System.Double)">
            <summary>
            Установка константы
            </summary>
            <param name="c">Константа</param>
        </member>
        <member name="T:AI.Vector">
            <summary>
            Класс реализующий вектора и операции над ними
            </summary>
        </member>
        <member name="P:AI.Vector.Current">
            <summary>
            Текущий элемент
            </summary>
        </member>
        <member name="M:AI.Vector.GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.MoveNext">
            <summary>
            Перевод указателя на следующий элемент
            </summary>
            <returns></returns>
        </member>
        <member name="P:AI.Vector.Count">
            <summary>
            Кол-во элементов, аналог N
            </summary>
        </member>
        <member name="P:AI.Vector.IsReadOnly">
            <summary>
            Является коллекция только для чтения
            </summary>
        </member>
        <member name="M:AI.Vector.IndexOf(System.Double)">
            <summary>
            Определяет индекс, аналог IndexValue
            </summary>
            <param name="item">Число типа double</param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.Insert(System.Int32,System.Double)">
            <summary>
            Добавление элемента после определенного индекса
            </summary>
            <param name="index">Индекс, куда вставить</param>
            <param name="item">значение, что вставить</param>
        </member>
        <member name="M:AI.Vector.RemoveAt(System.Int32)">
            <summary>
            Удаление по индексу
            </summary>
            <param name="index">Индекс удаляемого элемента</param>
        </member>
        <member name="M:AI.Vector.Add(System.Double)">
            <summary>
            Добавление элемента
            </summary>
            <param name="item">Элемент</param>
        </member>
        <member name="M:AI.Vector.Clear">
            <summary>
            Очистка вектора
            </summary>
        </member>
        <member name="M:AI.Vector.Contains(System.Double)">
            <summary>
            Проверяет, содержит ли вектор данный элемент
            </summary>
            <param name="item">Число double</param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.CopyTo(System.Double[],System.Int32)">
            <summary>
            Копирование данных начиная с  arrayIndex
            </summary>
            <param name="array">Массив</param>
            <param name="arrayIndex">Начало копирование</param>
        </member>
        <member name="M:AI.Vector.Remove(System.Double)">
            <summary>
            Удаляет первое вхождение item
            </summary>
            <param name="item">Число double</param>
        </member>
        <member name="M:AI.Vector.Sort">
            <summary>
            Сортировка
            </summary>
        </member>
        <member name="P:AI.Vector.DataInVector">
            <summary>
            Массив типа double содержащий отсчеты вектора
            </summary>
        </member>
        <member name="P:AI.Vector.N">
            <summary>
            Размерность вектора
            </summary>
        </member>
        <member name="P:AI.Vector.Item(System.Int32)">
            <summary>
            Доступ по индексу
            </summary>
            <param name="i">Индекс</param>
            <returns>Значение вектора</returns>
        </member>
        <member name="M:AI.Vector.#ctor">
            <summary>
            Создает вектор с нулями размерности 3
            </summary>
        </member>
        <member name="M:AI.Vector.#ctor(System.Double)">
            <summary>
            Создает вектор размерности 1, со значением a
            </summary>
            <param name="a">Значение нулевой ячейки</param>
        </member>
        <member name="M:AI.Vector.#ctor(System.Int32)">
            <summary>
            Создает вектор с нулями размерности n
            </summary>
        </member>
        <member name="M:AI.Vector.#ctor(System.Double[])">
            <summary>
            Создает вектор на основе массива
            </summary>
        </member>
        <member name="M:AI.Vector.#ctor(System.String[])">
            <summary>
            Создает вектор на основе строк, где каждая строка представляет число double
            </summary>
            <param name="strVector"></param>
        </member>
        <member name="M:AI.Vector.#ctor(System.String,System.Char)">
            <summary>
            Создает вектор на основе текстового файла, где лежат числа double
            </summary>
            <param name="textPath">Путь до файла</param>
            <param name="separator">разделитель, 1 заменяется на \n</param>
        </member>
        <member name="M:AI.Vector.#ctor(System.String)">
            <summary>
            Создает вектор на основе текстового файла, каждая строка представляет число double
            </summary>
            <param name="textPath">Путь до файла</param>
        </member>
        <member name="M:AI.Vector.op_Multiply(AI.Vector,AI.Vector)">
            <summary>
            Умножение
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Addition(AI.Vector,AI.Vector)">
            <summary>
            Сложение
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Addition(AI.Vector,System.Double)">
            <summary>
            Сложение
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Addition(System.Double,AI.Vector)">
            <summary>
            Сложение
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Subtraction(System.Double,AI.Vector)">
            <summary>
            Вычитание
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Subtraction(AI.Vector,System.Double)">
            <summary>
            Вычитание
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_UnaryNegation(AI.Vector)">
            <summary>
            Отрицание
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Division(AI.Vector,AI.Vector)">
            <summary>
            Деление
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Subtraction(AI.Vector,AI.Vector)">
            <summary>
            Вычитание
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Multiply(System.Double,AI.Vector)">
            <summary>
            Умножение
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Multiply(AI.Vector,System.Double)">
            <summary>
            Умножение
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Division(System.Double,AI.Vector)">
            <summary>
            Деление
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Division(AI.Vector,System.Double)">
            <summary>
            Деление
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_ExclusiveOr(AI.Vector,System.Double)">
            <summary>
            Возведение в степень
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_ExclusiveOr(System.Double,AI.Vector)">
            <summary>
            Возведение в степень
            </summary>
            <param name="A"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_ExclusiveOr(AI.Vector,AI.Vector)">
            <summary>
            Возведение в степень
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Modulus(AI.Vector,System.Double)">
            <summary>
            Остаток от деления
            </summary>
            <param name="k"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Modulus(System.Double,AI.Vector)">
            <summary>
            Остаток от деления
            </summary>
            <param name="k"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Modulus(AI.Vector,AI.Vector)">
            <summary>
            Остаток от деления поэлементно
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_BitwiseAnd(AI.Vector,AI.Vector)">
            <summary>
            Свертка
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_BitwiseOr(AI.Vector,AI.Vector)">
            <summary>
            Корреляция
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_LogicalNot(AI.Vector)">
            <summary>
            Автокорреляция
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Equality(AI.Vector,AI.Vector)">
            <summary>
            Проверка равенства
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.op_Inequality(AI.Vector,AI.Vector)">
            <summary>
            Проверка равенства
            </summary>
            <param name="A">Вектор 1</param>
            <param name="B">Вектор 2</param>
            <returns>Равно ли</returns>
        </member>
        <member name="M:AI.Vector.IndexDel(System.Int32)">
            <summary>
            Удаление по индексу
            </summary>
            <param name="index">Индекс</param>
        </member>
        <member name="M:AI.Vector.Round(System.Int32)">
            <summary>
            Округление
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.ElementDel(System.Double)">
            <summary>
            Удаление выбранного элемента
            </summary>
            <param name="element">Элементы</param>
        </member>
        <member name="M:AI.Vector.IndexValue(System.Double)">
            <summary>
            Выдает индекс по первому вхождению значения  
            </summary>
            <param name="value">значение</param>
        </member>
        <member name="M:AI.Vector.ElementsDel(AI.Vector)">
            <summary>
            Удаление выбранных элементов
            </summary>
            <param name="elements">Элементы</param>
        </member>
        <member name="M:AI.Vector.ElementsDel(System.Double[])">
            <summary>
            Удаление выбранных элементов
            </summary>
            <param name="elements">Элементы</param>
        </member>
        <member name="M:AI.Vector.ElementsDel(System.Collections.Generic.List{System.Double})">
            <summary>
            Удаление выбранных элементов
            </summary>
            <param name="elements">Элементы</param>
        </member>
        <member name="M:AI.Vector.SaveAsText(System.String)">
            <summary>
            Сохраняет вектор как текстовый файл
            </summary>
            <param name="path">Путь до файла</param>
        </member>
        <member name="M:AI.Vector.GetInterval(System.Int32,System.Int32)">
            <summary>
            Возвращает вектор в интервале [a;b]
            </summary>
            <param name="a">a - нижняя граница</param>
            <param name="b">b - верхняя граница</param>
            <returns>Вектор</returns>
        </member>
        <member name="M:AI.Vector.Copy">
            <summary>
            Копирование вектора
            </summary>
            <returns>Возвращает копию</returns>
        </member>
        <member name="M:AI.Vector.Visual">
            <summary>
            Визуализация вектора
            </summary>
        </member>
        <member name="M:AI.Vector.Visual(AI.Vector)">
            <summary>
            Визуализация вектора
            </summary>
        </member>
        <member name="M:AI.Vector.AddSimmetr">
            <summary>
            Добавление отраженного вектора
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.VisualD">
            <summary>
            Визуализация вектора
            </summary>
        </member>
        <member name="M:AI.Vector.Visual(AI.Vector,AI.Charts.Description)">
            <summary>
            Визуализация вектора
            </summary>
        </member>
        <member name="M:AI.Vector.Revers">
            <summary>
            Реверс вектора
            </summary>
        </member>
        <member name="M:AI.Vector.CutAndZero(System.Int32)">
            <summary>
            Дополнение нулями или обрезание до нужного размера 
            вектора.
            </summary>
            <param name="n">Новый размер</param>
        </member>
        <member name="M:AI.Vector.Shift(System.Int32)">
            <summary>
            Сдвиг последовательности на определенное число
            Пример: последовательность 1 2 3 сдвинута на 2
            это 0 0 1 2 3, на 4 это 0 0 0 0 1 2 3
            </summary>
            <param name="valueShift"> На сколько сдвинуть</param>
            <returns>возвращает вектор длинны N+valueShift</returns>
        </member>
        <member name="M:AI.Vector.ToMatrix">
            <summary>
            Преобразование вектора в матрицу
            </summary>
        </member>
        <member name="M:AI.Vector.Decim(System.Int32)">
            <summary>
            Децимация(прореживание) вектора
            </summary>
            <param name="kDecim">Коэффициент децимации</param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.InterpolayrZero(System.Int32)">
            <summary>
            Интерполяция поленомом нулевого порядка
            </summary>
            <param name="kInterp">коэффициент интерполяции</param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.AddOne">
            <summary>
            Добавляет 1 в начало
            </summary>
        </member>
        <member name="M:AI.Vector.Is0">
            <summary>
            Проверяет все ли элементы вектора нулевые
            </summary>
            <returns>true если все, false иначе</returns>
        </member>
        <member name="M:AI.Vector.Is0(System.Int32)">
            <summary>
            Проверяет нулевых элементов больше "n"
            </summary>
            <param name="n"></param>
            <returns>true если больше, false иначе</returns>
        </member>
        <member name="M:AI.Vector.Save(System.String)">
            <summary>
            Сохранение вектора
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.Vector.Open(System.String)">
            <summary>
            Загрузка вектора
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.Vector.ToList">
            <summary>
            Преобразование вектора в структуру типа List"double" 
            </summary>
        </member>
        <member name="M:AI.Vector.ToString">
            <summary>
            Выводит значение элементов вектора в виде строки
            </summary>
        </member>
        <member name="M:AI.Vector.Equals(System.Object)">
            <summary>
            Эквивалентность
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.GetHashCode">
            <summary>
            Хэш-код
            </summary>
        </member>
        <member name="M:AI.Vector.PlayVector(System.Int32)">
            <summary>
            Проигрывание вектора
            </summary>
            <param name="fd">Частота дискретизации</param>
        </member>
        <member name="M:AI.Vector.TransformVector(System.Func{System.Double,System.Double})">
            <summary>
            Преобразование вектора
            </summary>
            <param name="transformFunc">Функция преобразования</param>
        </member>
        <member name="M:AI.Vector.Max">
            <summary>
            Максимальное значение
            </summary>
        </member>
        <member name="M:AI.Vector.Min">
            <summary>
            Минимальное значение
            </summary>
        </member>
        <member name="M:AI.Vector.Expend">
            <summary>
            Мат. ожидание
            </summary>
        </member>
        <member name="M:AI.Vector.Sum">
            <summary>
            Сумма
            </summary>
        </member>
        <member name="M:AI.Vector.Dispers">
            <summary>
            Дисперсия
            </summary>
        </member>
        <member name="M:AI.Vector.Std">
            <summary>
            СКО
            </summary>
        </member>
        <member name="M:AI.Vector.Norm">
            <summary>
            Норма вектора
            </summary>
        </member>
        <member name="M:AI.Vector.Normalise">
            <summary>
            Нормализация ско = 1, мат. ожидание 0
            </summary>
        </member>
        <member name="M:AI.Vector.Normalise(AI.Vector,AI.Vector)">
            <summary>
            Нормализация по ансамблю ско = 1, мат. ожидание 0
            </summary>
        </member>
        <member name="M:AI.Vector.Concatinate(AI.Vector[])">
            <summary>
            Конкатенация векторов
            </summary>
            <param name="vectors">Вектора</param>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.Seq0(System.Double,System.Double)">
            <summary>
            Последовательность начиная с нуля
            </summary>
            <param name="step">Шаг</param>
            <param name="end">Конечное значение</param>
        </member>
        <member name="M:AI.Vector.Time0(System.Double,System.Double)">
            <summary>
            Массив отсчетов времени
            </summary>
            <param name="fd">Частота дискретизации</param>
            <param name="t">Время (сек)</param>
        </member>
        <member name="M:AI.Vector.GetWindows(AI.Vector,System.Int32,System.Int32)">
            <summary>
            Разбивка на окна
            </summary>
            <param name="inp">Вход</param>
            <param name="w">Длинна окна</param>
            <param name="step">шаг</param>
        </member>
        <member name="M:AI.Vector.GetWindowsWithFunc(System.Func{AI.Vector,AI.Vector},AI.Vector,System.Int32,System.Int32)">
            <summary>
            Разбивка на окна
            </summary>
            <param name="transformer">Функция для трансформации векторов</param>
            <param name="inp">Вход</param>
            <param name="w">Длинна окна</param>
            <param name="step">шаг</param>
        </member>
        <member name="M:AI.Vector.GetWindowsWithFuncVect(System.Func{AI.Vector,System.Double},AI.Vector,System.Int32,System.Int32)">
            <summary>
            Разбивка на окна
            </summary>
            <param name="transformer">Функция для трансформации векторов</param>
            <param name="inp">Вход</param>
            <param name="w">Длинна окна</param>
            <param name="step">шаг</param>
        </member>
        <member name="M:AI.Vector.ScaleData(AI.Vector[])">
            <summary>
            Масштабирование данных
            </summary>
            <param name="data">Данные</param>
        </member>
        <member name="M:AI.Vector.Mean(AI.Vector[])">
            <summary>
            Усреднение по ансамблю
            </summary>
            <param name="vectors">Ансамбль векторов</param>
            <returns>Средний вектор</returns>
        </member>
        <member name="M:AI.Vector.VectorFromWav(System.String,System.Int32@)">
            <summary>
            Загрузка звукового файла как вектора
            </summary>
            <param name="pathToWavFile">Путь до файла</param>
            <param name="fd">Возвращаемый параметр, частота дискретизации</param>
            <returns>Вектор</returns>
        </member>
        <member name="M:AI.Vector.LoadAsBinary(System.String)">
            <summary>
            Загрузка вектора из массива double
            </summary>
            <param name="path">Путь</param>
        </member>
        <member name="M:AI.Vector.SaveAsBinary(System.String,AI.Vector)">
            <summary>
            Сохранение в массив double
            </summary>
            <param name="path">Путь до файла</param>
            <param name="vect">Вектор</param>
        </member>
        <member name="M:AI.Vector.ListToVector(System.Collections.Generic.List{System.Double})">
            <summary>
            Преобразование List в вектор
            </summary>
            <returns></returns>
        </member>
        <member name="M:AI.Vector.AddVector(AI.Vector,AI.Vector)">
            <summary>
            Вставляет отсчеты второго вектора, после отсчетов первого
            </summary>
            <param name="startVector">куда вставлять</param>
            <param name="addedVector">что вставлять</param>
            <returns>вектор размерности nach.N+dop.N</returns>
        </member>
        <member name="T:AI.IntervalData">
            <summary>
            Данные интервалов
            </summary>
        </member>
        <member name="M:AI.IntervalData.#ctor">
            <summary>
            Данные интервалов
            </summary>
        </member>
        <member name="M:AI.IntervalData.Add(System.Int32,System.Int32)">
            <summary>
            Добавление интервала
            </summary>
            <param name="bI">Начало</param>
            <param name="eI">Конец</param>
        </member>
        <member name="M:AI.IntervalData.GetVects(AI.Vector)">
            <summary>
            Нарезка вектора по интервалам
            </summary>
            <param name="inputVector">Вектор входа</param>
        </member>
        <member name="M:AI.IntervalData.GetVect(System.Func{AI.Vector,System.Double},AI.Vector)">
            <summary>
            Нарезка вектора по интервалам + преобразование
            </summary>
            <param name="vect2doub">Функция для преобразования вектора в число</param>
            <param name="input">Вектор входа</param>
        </member>
        <member name="T:AI.Convolution">
            <summary>
            Класс реализующий свертку последовательностей
            </summary>
        </member>
        <member name="M:AI.Convolution.DirectConvolution(AI.Vector,AI.Vector)">
            <summary>
            Прямая свертка 
            </summary>
        </member>
        <member name="M:AI.Convolution.DirectConvolution(AI.ComplexVector,AI.ComplexVector)">
            <summary>
            Прямая свертка комплексный вектор
            </summary>
        </member>
        <member name="M:AI.Convolution.DirectConvolution(AI.ComplexVector,AI.Vector)">
            <summary>
            Прямая свертка комплексный и реальный вектор
            </summary>
        </member>
        <member name="M:AI.Convolution.СircularConvolution(AI.Vector,AI.Vector)">
            <summary>
            Круговая свертка 
            </summary>
        </member>
        <member name="M:AI.Convolution.СircularConvolution(AI.ComplexVector,AI.ComplexVector)">
            <summary>
            Круговая свертка комплексный вектор
            </summary>
        </member>
    </members>
</doc>
